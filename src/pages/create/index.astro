---
import { t } from 'astro-i18n';
import CreateProcessLayout from '@layouts/CreateProcessLayout.astro';
import Step1 from '@components/setup/Step1.astro';
import { Icon } from 'astro-icon'

type ProcessCookie = {
    weighting?: string;
    title?: string;
    nojsdescription?: string;
    quillopsdescription?: string;
    step: string;
};
const processCookie = JSON.parse(Astro.cookies.get('process')?.value || '{}');
const { weighting = "", title = "", nojsdescription = "", quillopsdescription = "", step = 1 } = processCookie as ProcessCookie;
const currentStep = Number(step);
const hasExistingProcessData = Object.keys(processCookie).length > 0;
console.log(currentStep)
---

<CreateProcessLayout step={currentStep}>
  {currentStep === 1 ? (
    <>
      {hasExistingProcessData ? (
        <input type="checkbox" id="existingProcessModal" class="modal-toggle" checked/>
        <label for="existingProcessModal" class="modal">
          <label class="modal-box">
            <label for="existingProcessModal" class="btn btn-sm btn-circle absolute right-2 top-2">
              <Icon width="22" name="close"/>
            </label>
            <h3>{() => t('process.continueEditing')}</h3>
            <p>{() => t('process.existingProcessPrompt')}</p>

            <div class="process-details">
              { title && <p><strong>{() => t('process.topic')}:</strong> {title}</p> }
              { nojsdescription && <p><strong>{() => t('process.description')}:</strong> {nojsdescription}</p> }
              { weighting && <p><strong>{() => t('process.weighting')}:</strong> {weighting}</p> }
            </div>

            <div class="flex justify-center">
              <a href="/edit-existing" class="btn m-2">{() => t('process.continue')}</a>
              <a href="/start-new" class="btn m-2">{() => t('process.startNew')}</a>
            </div>
          </label>
        </label>
      ) : null}
      <Step1 title={title} quillopsdescription={quillopsdescription} weighting={weighting} nojsdescription={nojsdescription}/>
    </>
  ) : null}
  {currentStep === 2 ? (
    <div>
      <form action='/api/process-store' method="POST">
        <input type="hidden" name="step" value="2" />
        <div class="flex justify-around flex-wrap">
          <button type="submit" name="phase" value="full" class="btn btn-primary m-2">
            { () => t('process.phases.full') }
          </button>
          <button type="submit" name="phase" value="voting" class="btn btn-primary m-2">
            { () => t('process.phases.voting') }
          </button>
        </div>
      </form>
    </div>
  ) : null}
</CreateProcessLayout>

<script>
  import { createQuill, updateQuill } from '@utils/quillUtils';

  const quillContainer = document.getElementById('description') as HTMLElement;
  quillContainer.innerText = '';
  const quillOpsInput = document.getElementById('quillops') as HTMLInputElement;
  const quillEditor = createQuill('#description');

  if (quillOpsInput.value) {
    try {
      const quillOps = JSON.parse(quillOpsInput.value);
      updateQuill(quillEditor, quillOps);
    } catch (error) {
      console.error('Error parsing quillopsdescription:', error);
    }
  }

  quillEditor.on('text-change', () => {
    /* @ts-ignore */
    quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
  });

</script>