---
import { t } from 'astro-i18n';
import CreateProcessLayout from '@layouts/CreateProcessLayout.astro';
import weightingOptions from '@utils/weightingOptions';
import Modal from '@components/ui/Modal.astro';
import ContentDoc from '@components/ui/ContentDoc.astro';
import { Icon } from 'astro-icon'

const checkFormData = async () => {
  if ('formData' in Astro.request) {
    try {
      const formData = await Astro.request.formData();
      if (formData && 'noGuide' in formData) {
        const noGuide = formData.get('noGuide');
        Astro.cookies.set('noGuide', noGuide === 'on' ? 'true' : 'false');
      }
    } catch (error) {}
  }
};

checkFormData();

type ProcessCookie = {
    weighting?: string;
    title?: string;
    nojsdescription?: string;
    quillopsdescription?: string;
};
const processCookie = JSON.parse(Astro.cookies.get('process')?.value || '{}');
const { weighting = "", title = "", nojsdescription = "", quillopsdescription = "" } = processCookie as ProcessCookie;

const hasExistingProcessData = Object.keys(processCookie).length > 0;

---

<CreateProcessLayout step={1}>
  {hasExistingProcessData ? (
    <input type="checkbox" id="existingProcessModal" class="modal-toggle" checked/>
    <label for="existingProcessModal" class="modal">
      <label class="modal-box">
        <label for="existingProcessModal" class="btn btn-sm btn-circle absolute right-2 top-2">
          <Icon width="22" name="close"/>
        </label>
          <h3>{t('process.continueEditing')}</h3>
          <p>{t('process.existingProcessPrompt')}</p>

          <div class="process-details">
            { title && <p><strong>{t('process.topic')}:</strong> {title}</p> }
            { nojsdescription && <p><strong>{t('process.description')}:</strong> {nojsdescription}</p> }
            { weighting && <p><strong>{t('process.weighting')}:</strong> {weighting}</p> }
          </div>

          <div class="flex justify-center">
            <a href="/edit-existing" class="btn m-2">{t('process.continue')}</a>
            <a href="/start-new" class="btn m-2">{t('process.startNew')}</a>
          </div>
      </label>
    </label>
  ) : null}


  <form action='/api/process-store' method="POST">
    <input type="hidden" name="step" value="1" />
    <div id="scrollTopicQuestion" />
    <p>{ t('process.topic') }</p>
    <input 
      id="topicQuestion" 
      name="topicQuestion" 
      class="input input-bordered w-full" 
      type="text" 
      value={title} 
      required 
      title={t('alert.error.topicQuestion')}
    />
    <br/>
    <br/>
    <p>{ t('process.description') }</p>
  
    <div id="description">Loading QuillEditor...</div>
  
    <noscript>
      <textarea id="nojsdescription" name="nojsdescription" class="textarea textarea-bordered w-full">{nojsdescription}</textarea>
    </noscript>
    <input id="quillops" name="quillopsdescription" class="hidden" value={quillopsdescription} />
    <br/>
    <!--details class="text-center">
      <summary class="cursor-pointer text-indianared mt-6 ">{ t('process.advancedOptions') }</summary-->
    <div class="flex justify-between items-center">
      <span>{ t('process.weighting') }</span>
      <span class="flex justify-center items-center">
        <select id="select" name="weighting" class="select mx-2 select-bordered mt-2" value={weighting}>
          {weightingOptions.map(weight => (
            <option value={weight.value}>
              { Number(weight.value) > 0 ? <span>{ weight.label }</span> : <span>&infin;</span> }
            </option>
          ))}
        </select>
        
        <Modal id="weightingInfo">
          <h3>{ t('process.weighting') }</h3>
          <ContentDoc file_name="NegativeScoreWeighting"/>
        </Modal>
      </span>
    </div>
    <br/>
    <div class="flex justify-center">
      <input type="submit" class="btn btn-primary" value="Next">
    </div>
  </form>
</CreateProcessLayout>

<script>
  import { createQuill, updateQuill } from '@utils/quillUtils';

  const quillContainer = document.getElementById('description') as HTMLElement;
  quillContainer.innerText = '';
  const quillOpsInput = document.getElementById('quillops') as HTMLInputElement;
  const quillEditor = createQuill('#description');

  if (quillOpsInput.value) {
    try {
      const quillOps = JSON.parse(quillOpsInput.value);
      updateQuill(quillEditor, quillOps);
    } catch (error) {
      console.error('Error parsing quillopsdescription:', error);
    }
  }

  quillEditor.on('text-change', () => {
    /* @ts-ignore */
    quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
  });

</script>