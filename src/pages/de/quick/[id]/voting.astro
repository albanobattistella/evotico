---
import { t, changeLanguage } from "i18next";
import Countdown from "molecules:Countdown";
import BaseLayout from "templates:BaseLayout";
import InfoCard from "organisms:QuickInfoCard";
import { Icon } from "astro-icon";

changeLanguage("de");

const processId = Astro.params.id;
const { url } = Astro;
const res = await fetch(`${url.origin}/quick/process/${processId}`, { method: "GET" });
const data = await res.json();
const quick = JSON.parse(data.process);
---
<style>
    .gray {
        filter: grayscale(100%);
    }
</style>
<BaseLayout>
    <div class="card bg-base-200 px-6 my-4 py-6">

        <InfoCard title={quick.title} description={quick.description} weighting={quick.weighting}>
            <Countdown label={ t('quick.votingEndTime') } timeleft={ quick.votingEnd } />
    
        </InfoCard>
        <voting-list>
            <div class="proposals">
                <div class="proposal bg-base-100 card shadow-xl py-2 px-4 my-4">
                    <h3>Title</h3>
                    <p>Description</p>
                    <br/>
                    <div class="flex justify-between">
                        <button class="btn btn-ghost btn-circle">
                            <Icon class="gray" name="rage"/>
                        </button>
                        <button class="btn btn-ghost btn-circle">
                            <Icon class="gray" name="angry"/>
                        </button>
                        <button class="btn btn-ghost btn-circle">
                            <Icon class="gray" name="sad"/>
                        </button>
                        <button class="btn btn-ghost btn-circle">
                            <Icon class="" width="48" name="neutral"/>
                        </button>
                        <button class="btn btn-ghost btn-circle">
                            <Icon class="gray" width="48" name="smiling"/>
                        </button>
                        <button class="btn btn-ghost btn-circle">
                            <Icon class="gray" width="48" name="happy"/>
                        </button>
                        <button class="btn btn-ghost btn-circle">
                            <Icon class="gray" width="48" name="loving"/>
                        </button>
                    </div>
                </div>
            </div>
            <div class="text-center mt-2 flex items-center">
                <input type="text" class="input w-full m-2"/>
                <button id="submit-vote" class="btn btn-primary p-2" >
                    {t('quick.submitVote')}
                </button>
            </div>
        </voting-list>
    </div>
</BaseLayout>

<script>
    const processId = window.location.pathname.split('/quick/')[1].split('/')[0]
    const res = await fetch(`${location.origin}/quick/process/${processId}`, { method: "GET" });
    const data = await res.json();
    const quick = JSON.parse(data.process)
    class VotingList extends HTMLElement {
        proposal_html = null
        proposals = null
        addProposal(data: any) {
            const proposal = this.proposal_html.cloneNode(true)
            proposal.querySelector('h3').innerHTML = data.title
            proposal.querySelector('p').innerHTML = data.description
            const buttons = proposal.querySelectorAll('button')
            buttons.forEach((button: HTMLButtonElement) => {
                button.addEventListener('click', () => {
                    const icon = button.querySelector('svg')
                    buttons.forEach(btn => {
                        const icon = btn.querySelector('svg')
                        icon.style.filter = "grayscale(100%)"
                    })
                    icon.style.filter = "grayscale(0%)"

                })
            })
            this.proposals.appendChild(proposal)

        }
        constructor() {
            super()
            this.proposals = this.querySelector('div.proposals')
            this.proposal_html = this.querySelector('div.proposal').cloneNode(true)
            this.proposals.innerHTML = ""

            quick.proposals.forEach((data: any) => {
                this.addProposal(data)
            });

            const submit = this.querySelector('button#submit-vote')
            submit.addEventListener('click', async() => {
                console.log('hi')
                
            })
        }
    }
    customElements.define('voting-list', VotingList)

    const checkTime = () => {
        const time =  +new Date(quick.votingEnd) - +new Date()
        /*if (time <= 0)

            window.location.href = `${window.location.origin}/quick/${processId}/results`
        else
            setTimeout(checkTime, 1000)*/
    }
    checkTime()
</script>