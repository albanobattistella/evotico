---
import BaseLayout from "@templates/BaseLayout.astro";
import { t, changeLanguage } from "i18next";
import Alert from "@molecules/Alert.astro";
import AlertManager from "@organisms/AlertManager.astro";
import { Icon } from "astro-icon";
import QuickInfo from "@organisms/QuickInfo.astro";
import Modal from "@molecules/Modal.astro";
import ContentDoc from "@atoms/ContentDoc.astro";
import QuickCreateTopic from "@organisms/QuickCreateTopic.vue";
import QuickTimeSelector from "@organisms/QuickTimeSelector.vue";
import QuickCreateProposals from "@organisms/QuickCreateProposals.vue";

changeLanguage("de");

const defaultProposals = "";
const proposals = [
    {
        title: t("proposal.zero.title"),
        description: t("proposal.zero.description"),
    },
    {
        title: t("proposal.one.title"),
        description: t("proposal.one.description"),
    },
];
const mode = 0;
const slideSelector = true;
const proposalTimeLeft = { minutes: 10, hours: 0, days: 0 };
const votingTimeLeft = { minutes: 10, hours: 0, days: 0 };
---
<style is:inline>
  .show {
      display: block;
  }
  .hide {
      display: none;
  }
</style>
<AlertManager>
  <Alert type="error" icon="warning">
    { t('alert.quick.error.topicQuestion') }
  </Alert>
  <Alert type="success" icon="checkmark-outline">
    { t('alert.quick.success.createProcess') } 
  </Alert>
</AlertManager>

<BaseLayout>
  <h1>{ t('quick.title')  }</h1>
  <quick-form data-proposals={JSON.stringify(proposals)} >
    <QuickCreateTopic client:only="vue" />
    <hr/>
    <QuickTimeSelector client:only="vue"/>
    <QuickCreateProposals client:only="vue"/>
    <br/>
    <br/>
    <div class="text-center">
      <button id="submit" type="submit" class="btn btn-primary">
        { t('create') }
      </button>
    </div>
  </quick-form>
</BaseLayout>

<script>
  import { addAlert } from 'composables/addAlert'

  const alertManager = document.querySelector('div.alert-manager')
  const alertList = alertManager.querySelector('div.alert-list')
  const alerts = alertManager.querySelectorAll('div.alert')


  class QuickForm extends HTMLElement {
    form = {}
    findValues(inputs: NodeListOf<any>) {
      Array.from(inputs).forEach((input) => {
        if (input.name) {
          this.form[input.name] = (input.type === "checkbox") ? input.checked : input.value;
        }
      })
    }


    constructor() {
      super()
    

      const buttons = this.querySelectorAll('button')
      const inputs = this.querySelectorAll('input')
      const textareas = this.querySelectorAll('textarea')
      const selectors = this.querySelectorAll('select')

      const proposals = JSON.parse(this.dataset.proposals)
      const button = Array.from(buttons).find(btn => btn.id === 'submit')

      button.addEventListener('click', async() => {
        this.form = {}
        this.findValues(inputs)
        this.findValues(textareas)
        this.findValues(selectors)
        const lang = document.documentElement.lang
        if (this.form['topicQuestion'] === '') {
          addAlert(alertList, alerts[0].cloneNode(true))
        }
        else {
          addAlert(alertList, alerts[1].cloneNode(true))
          this.form['proposals'] = this.form['defaultProposals'] ? proposals : [] 
          let res: any, json: any;
          if (import.meta.env.DEV) {
            window.location.href = `/${lang !== 'en' ? lang + '/' : '' }quick/dev/proposals`
          }
          else {
            try {
              res = await fetch(`${location.origin}/api/quick/process`, {
                method: "POST",
                headers: {'Content-Type':'application/json'},
                body: JSON.stringify(this.form)
              });
              json = await res.json();
            } catch (error) {
              console.error(error);
              return;
            }
            window.location.href = `/${lang !== 'en' ? lang + '/' : '' }quick/${json.id}/proposals`
          }
        }
      })
    }
  }
  customElements.define('quick-form', QuickForm)

</script>