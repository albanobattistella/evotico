---
import BaseLayout from "templates:BaseLayout";
import TimeSelector from "molecules:TimeSelector";
import { weightingOptions } from "composables/weightingOptions";
import { t, changeLanguage } from "i18next";
import WeightingInfo from "molecules:WeightingInfo";
import DefaultProposalInfo from "molecules:DefaultProposalInfo";

changeLanguage("de");

const weightOptions = weightingOptions();
const topicDescription = "";
const topicQuestion = "";
const weighting = weightOptions[2].value;
const defaultProposals = "";
const proposals = [
    {
        title: t("proposal.zero.title"),
        description: t("proposal.zero.description"),
    },
    {
        title: t("proposal.one.title"),
        description: t("proposal.one.description"),
    },
];
---
<style>
  .alert-list {
    position: fixed;
    top: 2rem;
    left: 0;
    right: 0;
  }
</style>

<BaseLayout>

  <h1>{ t('quick.title')  }</h1>
  <quick-form data-proposals={JSON.stringify(proposals)}>
    <p>{ t('quick.topic') }</p>
    <input name="topicQuestion" class="input input-bordered w-full" value={topicQuestion} type="text">
    <br>
    <p>{ t('quick.description') }</p>
    <textarea name="topicDescription" class="textarea textarea-bordered w-full" value={topicDescription} />
    <br><br>
    <span>{ t('quick.weighting') }</span>
    <span class="flex justify-center items-center">
      <select name="weighting" class="select" value={weighting}>
        { weightOptions.map((weight) => 
          <>
            <option selected={weighting === weight.value} value={weight.value}>{ weight.label }</option>
          </>
        )}
      </select>
      <WeightingInfo />
    </span>
    <br>
    <TimeSelector/>
    <div class="flex justify-around align-center items-center">
      <div class="flex justify-center items-center">
        <input name="defaultProposals" type="checkbox" checked={defaultProposals} class="checkbox" />

        <span>&nbsp;{ t('quick.addDefaultProposals') }</span>
        <DefaultProposalInfo />
      </div>
    </div>
    <br/>
    <div class="alert-manager">
      <div class="m-0 p-0 flex flex-col items-center alert-list">
        <div class="alert alert-error w-80 shadow-lg m-2" style="display: none">
          <div>
            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
            <span>{ t('alert.quick.error.topicQuestion') }</span>
          </div>
        </div>
        <div class="alert alert-success w-80 shadow-lg m-2" style="display: none">
          <div>
            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
            <span>{ t('alert.quick.success.create') }</span>
          </div>
        </div>
      </div>
    </div>
    <br/>
    <div class="text-center">
      <button id="submit" type="submit" class="btn btn-primary">
        { t('create') }
      </button>
    </div>
    
    <br/>

  </quick-form>
</BaseLayout>

<script>
  class QuickForm extends HTMLElement {
    form = {}
    alertManager = null
    successAlert = null
    errorAlert = null
    findValues(inputs: NodeListOf<any>) {
      Array.from(inputs).forEach((input) => {
        if(input.name) {
          if (input.type === "checkbox")
            this.form[input.name] = input.checked
          else
            this.form[input.name] = input.value
        }
      })
    }
    addAlert(alert){
      const list =  this.alertManager.querySelector('div.alert-list')
      alert.style.display = "block"
      list.appendChild(alert)
      setTimeout(() => {
        list.removeChild(alert)
      }, 3000)
    }
    constructor() {
        super()
        const buttons = this.querySelectorAll('button')
        const inputs = this.querySelectorAll('input')
        const textareas = this.querySelectorAll('textarea')
        const selectors = this.querySelectorAll('select')
        this.alertManager = this.querySelector('div.alert-manager')
        this.successAlert = this.alertManager.querySelector('div.alert-success').cloneNode(true)
        this.errorAlert = this.alertManager.querySelector('div.alert-error').cloneNode(true)
        //this.alertList.innerHTML = ""

        const proposals = JSON.parse(this.dataset.proposals)
        const button = Array.from(buttons).find(btn => btn.id === 'submit')

        button.addEventListener('click', async() => {
          this.form = {}
          this.findValues(inputs)
          this.findValues(textareas)
          this.findValues(selectors)
          const lang = document.documentElement.lang
          if (this.form['topicQuestion'] === '') {
            this.addAlert(this.errorAlert.cloneNode(true))
          }
          else {
            this.addAlert(this.successAlert.cloneNode(true))

            this.form['strategy'] = 1
            this.form['proposals'] = this.form['defaultProposals'] ? proposals : [] 
            const res = await fetch(`${location.origin}/quick/process`, {
              method: "POST",
              body: JSON.stringify(this.form)
            });
            const json = await res.json();
            window.location.href = `/${lang !== 'en' ? lang + '/' : '' }quick/${json.id}/proposals`

          }

        })
    }
  }
  customElements.define('quick-form', QuickForm)


</script>