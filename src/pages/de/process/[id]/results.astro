---
import ProcessLayout from "templates/ProcessLayout.astro";
import { Icon } from "astro-icon";
import i18next, { t, changeLanguage } from "i18next";
import getProcessUrl from "composables/getProcessUrl";
import AlertManager from "molecules/AlertManager.astro";
import Alert from "atoms/Alert.astro";
import fetchProcessData from "composables/fetchProcessData";

changeLanguage("de");

const processId = Astro.params.id;
const { url } = Astro;

const process = fetchProcessData(processId, url)
if (process === null)
    return Astro.redirect("/");


const emojis = ["rage", "angry", "sad", "neutral", "smiling", "happy", "loving"];
if (!("voters" in process)) {
    process["voters"] = [];
}
const pathname = `${i18next.language === "en" ? "" : `/${i18next.language}`}${getProcessUrl(process, processId)}`;
if (pathname !== url.pathname)
    return Astro.redirect(`${url.origin}${pathname}`);
---
<style>
    .hide {
        display: none;
    }
</style>
<ProcessLayout process={process}>
    <results-card>
        <div class="hide">
            { emojis.map(emoji => (
                <Icon class="emoji" name={emoji} width="48" />
            ))}
        </div>
        <div class="tabs flex flex-nowrap w-full justify-between">
            <a class="tab tab-bordered tab-active w-full h-12"><Icon width="16" name="face-cool"/></a> 
            <a class="tab tab-bordered w-full h-12"><Icon width="16" name="list"/></a> 
        </div>

        <div class="tab-content hide">
            <div class="screenshot-results">
                <span class="flex justify-between items-center">
                    <h2>{ t('process.results') }</h2>
                
                    <button class='repeat-button btn btn-sm'>{ t('repeatProcess') }</button>
                </span>
                
                <h3><span class="voter-label">{ t('process.voters') }</span>
                    <span class="num-voters">({ process.voters.length })</span>:
                </h3>
                <div class="flex justify-around flex-wrap">
                    { process.voters.map((voter: any) => (
                        <div id={voter.id} class="flex items-center p-2 voter">
                            <input type="checkbox" checked class="checkbox checkbox-xs" />
                            <span class="p-1 cursor-pointer select-none">
                                { voter.name }
                            </span>
                        </div>
                    ))}
                </div>
                <br/>
                <div class="overflow-x-auto">
                    <table class="table w-full">
                        <!-- head -->
                        <thead>
                            <tr class="table-row-one">
                            <td></td>
                            <th>{ t('process.proposal') }</th>
                            <th class="whitespace-normal break-words">{ t('process.averageScore') }</th>
                            <th class="whitespace-normal break-words">{ t('process.totalScore') }</th>
                            </tr>
                        </thead>
                        <tbody class="proposal-list">
                        </tbody>
                    </table>
                </div>
                <br/>
            </div>
                <div class="card">
                <h3>{ t('process.exportData') }</h3>
                <div class="flex justify-around exports">
                    <button class="export-markdown btn btn-ghost"><Icon width="28" name="document-download"/></button>
                    <button class="export-image btn btn-ghost"><Icon width="28" name="camera" /></button>
                </div>
            </div>
                
        </div>
        <div class="tab-content hide">
            <div>
                <br/>
                <br/>
                { t('wip')}
            </div>
        </div>
        <AlertManager>
            <Alert type="success" icon="checkmark-outline" success>
                { t('alert.success.repeatProcess') }
            </Alert>
            <Alert type="error" icon="checkmark-outline" error>
                { t('alert.error.missingProposals') }
            </Alert>
        </AlertManager>
    </results-card>
</ProcessLayout>



<script>
    import download from 'downloadjs'
    import IProposal from 'interfaces/IProposal'
    import { toPng } from 'html-to-image';
    import { processTest } from "composables/processTestData";
    import { process as storeProcess } from 'stores/processStore'
    import { addAlert } from 'composables/addAlert'

    const processId = window.location.pathname.split('/process/')[1].split('/')[0]
    const isDev = processId === 'dev';
    const res = isDev ? new Response() : await fetch(`${location.origin}/api/process/${processId}`, { method: "GET" });
    const data = isDev ? null : await res.json();
    const process = isDev ? processTest() : JSON.parse(data.process)

    const save = (filename: string, data: any, type: string): void => {
        const blob = new Blob([data], {type});

        const elem = window.document.createElement('a');
        elem.href = window.URL.createObjectURL(blob);
        elem.download = filename;        
        document.body.appendChild(elem);
        elem.click();        
        document.body.removeChild(elem);
    }

    const getHighlighting = (className: string) => {
        switch (className) {
            case "color-0":
                return "rgba(205, 92, 92, 0.3)";
            case "color-1":
                return "rgba(205, 92, 92, 0.2)";
            case "color-2":
                return "rgba(205, 92, 92, 0.1)";
            default:
                return "";
        }
    };

    class ResultsCard extends HTMLElement {
        voter_list: NodeListOf<HTMLDivElement> = this.querySelectorAll('div.voter')
        proposal_list = this.querySelector('tbody.proposal-list') 
        emojis = this.querySelectorAll('svg.emoji')
        alertList = this.querySelector('div.alert-manager').querySelector('div.alert-list')
        alerts = this.querySelector('div.alert-manager').querySelectorAll('div.alert')
       
        getTotal(proposalId: string, selectedVoters: any) {
            return selectedVoters.reduce((sum: number, voter: any) => {
                const process_voter = process.voters.find((vote: any) => vote.id === voter.id)
                const matchingVote = process_voter.votes.find((vote: any) => vote.proposalId === proposalId);
                if (matchingVote) {
                    let v = matchingVote.vote;
                    if (v < 0)
                        v *= process.weighting;
                    return sum + v;
                }
            
                return sum;
            }, 0);
        };

        getAverageScore(total: number, voters: any) {
            if (voters.length > 0) {
                let i = total / voters.length;
                return Math.round(i * 100) / 100
            }
            return 0
        }

        getAverageEmoji(total: number, voters: any) {
            let i = this.getAverageScore(total, voters)
            if (i < 0)
                i /= process.weighting;
            i = Math.round(i)
            return this.emojis[i + 3];
        };
        
        updateTable() {
            const selectedVoters = this.getSelectedVoters();
            const proposals = process.proposals;
            this.querySelector('span.num-voters').innerHTML = `(${selectedVoters.length})`;
            proposals.forEach((proposal: any) => {
                proposal["total"] = this.getTotal(proposal.id, selectedVoters);
            });
            const sortedProposals = proposals.sort((a, b) => {
                return b.total - a.total;
            });
            this.proposal_list.innerHTML = '';

            let rank = 0;
            let prevProposal = null;
            sortedProposals.forEach((proposal: any, index: number) => {
                if (proposal.title === '' && proposal.description === '') return

                if (prevProposal) {
                    rank += prevProposal.total === proposal.total ? 0 : 1;
                }
                prevProposal = proposal;
            
                this.proposal_list.appendChild(this.createRow(rank, index, proposal, selectedVoters));
            });

            const items = this.proposal_list.querySelectorAll('tr');
            items.forEach((item) => {
                const rows = item.querySelectorAll('td');
                rows.forEach((row) => {
                    row.style.backgroundColor = getHighlighting(item.className);
                });
            });
        }

        createRow(rank: number, index: number, proposal: any, selectedVoters: any[]) {
            const row = document.createElement('tr');
            row.className = 'color-' + rank;
            row.innerHTML = `
                <td class='select-for-repeat cursor-pointer'>
                        <input id="${proposal.id}" type="checkbox" class="checkbox checkbox-xs" />
                    </span>
                </td>
                <td class="whitespace-normal break-words">
                    <h3>${proposal.title}</h3>
                    <p>${proposal.description}</p>
                </td>
                <td align="center">
                    <div class="emoji-container tooltip cursor-pointer tooltip-left" data-tip=${this.getAverageScore(proposal.total, selectedVoters)}>`
            row.querySelector('div.emoji-container').insertAdjacentElement('beforeend', this.getAverageEmoji(proposal.total, selectedVoters));
            row.innerHTML += `</div>
                </td>
                <td align="center">${proposal.total}</td>
            `;

            const repeat = row.querySelector('td.select-for-repeat')
            repeat.addEventListener('click', (ev) => {
                if ('tagName' in ev.target && ev.target.tagName === 'INPUT') return
                const input = repeat.querySelector('input')
                input.checked = !input.checked
            })
            return row;

        }


        getMarkdownFile() {
            const selectedVoters = this.getSelectedVoters();
            const title = process.title;
            const processId = process.id;
            const description = process.description;
            const voterLabel = this.querySelector('span.voter-label').innerHTML;
            const numVoters = this.querySelector('span.num-voters').innerHTML;
            const selectedVotersString = selectedVoters.map((voter: any) => {
                const processVoter = process.voters.find((vote: any) => vote.id === voter.id);
                return `${processVoter.name} `;
            }).join('');
            const tableRowOne = this.querySelector('tr.table-row-one');
            const tableColumns = Array.from(tableRowOne.querySelectorAll('th')).map((row: any) => row.innerHTML).join(' | ');
            const proposals = process.proposals.map((proposal: any, index: number) => {
                if (proposal.title === '' && proposal.description === '') return
                const averageScore = this.getAverageScore(proposal.total, selectedVoters);
                return ` | ${index + 1} | ${proposal.title} - ${proposal.description} | ${averageScore} | ${proposal.total} |`;
            }).join('\n');
            
            let rtn = '';

            rtn += `# ${title}\n`;
            rtn += `${description}\n\n`;
            rtn += `${processId}\n\n`;
            rtn += `${voterLabel} ${numVoters}:\n`;
            rtn += `${selectedVotersString}\n\n`;
            rtn += `|  | ${tableColumns} |\n`;
            rtn += `| -- | -- | -- | -- |\n`;
            rtn += `${proposals}\n`;

            save(`${title}.md`, rtn, 'text/markdown');
        }

        getSelectedVoters() {
            return Array.from(this.voter_list).filter((div: HTMLDivElement) => div.querySelector('input').checked)
        }
        constructor() {
            super();
            const tabs = this.querySelectorAll('a.tab');
            const contents = this.querySelectorAll('div.tab-content');
            for (let i = 0; i < tabs.length; i++) {
                const tab = tabs[i];
                tab.addEventListener('click', () => {
                    this.showTab(tabs, contents, i);
                });
            }
            this.showTab(tabs, contents, 0);

            this.voter_list.forEach((div: HTMLDivElement) => {
                const input =div.querySelector('input')
                input.addEventListener('click', () => {
                    this.updateTable();
                });
                div.querySelector('span').addEventListener('click', () => {
                    input.checked = !input.checked
                    this.updateTable();
                });
            });

            this.updateTable();

            const exportMarkdownButton = this.querySelector('.export-markdown');
            const exportImageButton = this.querySelector('.export-image');
            exportMarkdownButton.addEventListener('click', () => {
                this.getMarkdownFile();
            });
            exportImageButton.addEventListener('click', () => {
                const theme = localStorage.getItem("theme");

                toPng(this.querySelector('div.screenshot-results') as HTMLElement, { backgroundColor: theme === 'dark' ? "black" : "white" }).then((dataUrl) => {
                    download(dataUrl, process.title + '.png');
                });
            });

            const repeatButton = this.querySelector('button.repeat-button')
            repeatButton.addEventListener('click', () => {
                const items = Array.from(this.querySelectorAll('td.select-for-repeat input[type="checkbox"]')).filter((input: HTMLInputElement) => input.checked);
                if (items.length > 1) {
                    addAlert(this.alertList, this.alerts[0].cloneNode(true))

                    storeProcess.setKey('title', process.title)
                    storeProcess.setKey('description', process.description)
                    storeProcess.setKey('weighting', process.weighting)
                    storeProcess.setKey('phases', 'voting')
                    const proposals = process.proposals.filter((proposal: IProposal) => 
                       items.some((item) => item.id === proposal.id)
                    );
                    storeProcess.setKey('proposals', proposals)
                    window.location.href = `${window.location.origin}/`

                }
                else {
                    addAlert(this.alertList, this.alerts[1].cloneNode(true))
                }
            })
            
        }

        showTab(tabs: NodeListOf<Element>, contents: NodeListOf<Element>, index: number) {
            contents.forEach((content) => content.classList.add('hide'));
            tabs.forEach((tab) => tab.classList.remove('tab-active'));
            tabs[index].classList.add('tab-active');
            contents[index].classList.remove('hide');
        }

    }
    customElements.define('results-card', ResultsCard)
</script>