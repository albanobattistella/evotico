---
import Alert from "molecules/Alert.astro";
import ProcessLayout from "templates/ProcessLayout.astro";
import AlertManager from "molecules/AlertManager.astro";
import i18next, { t, changeLanguage } from "i18next";
import { Icon } from "astro-icon";
import { processTest } from "composables/processTestData";
import { getProcessUrl } from "composables/getProcessUrl";

changeLanguage("de");

const processId = Astro.params.id;
const { url } = Astro;
const isDev = processId === "dev";
const res = isDev ? new Response() : await fetch(`${url.origin}/api/process/${processId}`, { method: "GET" });
const data = isDev ? null : await res.json();
const process = isDev ? processTest() : JSON.parse(data.process);
const emojiNames = ["rage", "angry", "sad", "neutral", "smiling", "happy", "loving"];
const pathname = `${i18next.language === "en" ? "" : `/${i18next.language}`}${getProcessUrl(process, processId)}`;
if (pathname !== url.pathname)
    return Astro.redirect(`${url.origin}${pathname}`);
---
<style>
    .gray {
        filter: grayscale(100%);
    }
    .icon {
        width: 48px;
    }
    @media screen and (max-width: 600px) {
    .icon {
        width: 32px;
    }
    .emoji-btn {
        flex-shrink: unset;
    }
  }
  
</style>
<ProcessLayout process={process}>
    <voting-list>
        <span class='flex justify-end'>
            <span>{ t('process.voters') }:&nbsp;</span>
            <span class='no-voters'>{ process.voters ? process.voters.length : '0' }</span>
        </span>
        <div class="proposal-list">
            <div class="proposal bg-base-100 card shadow-xl py-2 px-4 my-4">
                <h3></h3>
                <p></p>
                <br/>
                <div class="flex justify-between">
                    {emojiNames.map((name) => (
                        <button class="btn btn-ghost btn-circle emoji-btn">
                        <Icon
                            class={'icon ' + (name === 'neutral' ? '' : 'gray')}
                            name={name}
                        />
                        </button>
                    ))}
                </div>
            </div>
        </div>
        <br/>   
        <p>{ t('process.voterName') }</p>
        <div class="text-center flex items-center">
            <input id="sender-name" type="text" class="input w-full m-2"/>
            <button id="submit-vote" class="btn btn-primary p-2" >
                {t('process.submitVote')}
            </button>
        </div>
        <AlertManager>
            <Alert type="success" icon="checkmark-outline">
                { t('alert.success.submitVote') }
                <span class="name"></span>
            </Alert>
            <Alert type="error" icon="checkmark-outline">
                { t('alert.error.emptyName') }
            </Alert>
        </AlertManager>
    </voting-list>
</ProcessLayout>

<script>
    import { IProposal } from 'interfaces/IProposal'
    import { addAlert } from 'composables/addAlert'
    import { processTest } from "composables/processTestData";
    
    const processId = window.location.pathname.split('/process/')[1].split('/')[0]
    const isDev = processId === 'dev';
    const res = isDev ? new Response() : await fetch(`${location.origin}/api/process/${processId}`, { method: "GET" });
    const data = isDev ? null : await res.json();
    const process = isDev ? processTest() : JSON.parse(data.process)
    class VotingList extends HTMLElement {
        voteCounter = this.querySelector('span.no-voters')
        alertList = this.querySelector('div.alert-manager').querySelector('div.alert-list')
        alerts = this.querySelector('div.alert-manager').querySelectorAll('div.alert')
        proposal_html = null
        proposal_list = null
        addButtonListeners(buttons: NodeListOf<HTMLButtonElement>, proposal_node: HTMLDivElement) {
            buttons.forEach((button: HTMLButtonElement) => {
                button.addEventListener('click', (event) => {
                const svgs = proposal_node.querySelectorAll('svg');
                svgs.forEach((svg: SVGElement) => {
                    svg.classList.add('gray');
                });

                const svg = button.querySelector('svg');
                svg.classList.remove('gray');
                });
            });
        }
        submitVote = async () => {
            const votesMap = new Map();
            const proposals = this.proposal_list.querySelectorAll('div.proposal')
            Array.from(proposals).forEach((proposal_node: HTMLDivElement) => {
                const svgs = proposal_node.querySelectorAll('svg')
                for (const [i, svg] of svgs.entries()) {
                if (!svg.classList.contains('gray')) {
                    votesMap.set(proposal_node.id, i - 3);
                    svg.classList.add('gray');
                }
                if (i - 3 == 0)
                    svg.classList.remove('gray');
                
                };
            });
            const votes = Array.from(votesMap, ([proposalId, vote]) => ({ proposalId, vote }));
            const senderName: HTMLInputElement = this.querySelector('input#sender-name')
            const vote = {
                name: senderName.value,
                votes
            }
            if (senderName.value !== "") {
                this.alerts[0].querySelector('span.name').innerHTML = senderName.value
                addAlert(this.alertList, this.alerts[0].cloneNode(true))
                senderName.value = ''  

                if (!isDev) {
                    const res = await fetch(`${location.origin}/api/process/${processId}/vote`, {
                    method: "POST",
                    headers: {'Content-Type':'application/json'},
                    body: JSON.stringify(vote)
                    });
                    const json = await res.json();

                    const res_v = await fetch(`${location.origin}/api/process/${processId}/voters`)
                    const json_v = await res_v.json();
                    this.voteCounter.innerHTML = json_v.length
                }
            }
            else {
                addAlert(this.alertList, this.alerts[1].cloneNode(true))
            }
        };
        addProposal(proposal: IProposal) {
            if (proposal.title === '' && proposal.description === '') return
            const proposal_node = this.proposal_html.cloneNode(true)
            proposal_node.id = proposal.id
            proposal_node.querySelector('h3').innerHTML = proposal.title
            proposal_node.querySelector('p').innerHTML = proposal.description
            const buttons = proposal_node.querySelectorAll('button')
            this.addButtonListeners(buttons, proposal_node);
            this.proposal_list.appendChild(proposal_node)
        }
        constructor() {
            super()

            this.proposal_list = this.querySelector('div.proposal-list')
            this.proposal_html = this.proposal_list.querySelector('div.proposal').cloneNode(true)
            this.proposal_list.innerHTML = ""

            process.proposals.forEach((proposal: IProposal) => {
                this.addProposal(proposal)
            });

            const submit = this.querySelector('button#submit-vote')
            submit.addEventListener('click', this.submitVote)
        }
    }
    customElements.define('voting-list', VotingList)

    const checkTime = () => {
        const time = process.votingDates[1] - +new Date()
        if (time < 0)
            window.location.href = `${window.location.origin}/process/${processId}/results`
        else
            setTimeout(checkTime, time)
    }
    checkTime()
</script>