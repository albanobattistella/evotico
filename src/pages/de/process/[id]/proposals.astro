---
import { Icon } from "astro-icon";
import { t, changeLanguage } from "i18next";
import BaseLayout from "templates/BaseLayout.astro";
import Countdown from "molecules/Countdown.astro";
import ProcessInfo from "organisms/ProcessInfo.astro";
import { quickTest } from "composables/quickTestData";

changeLanguage("de");

const processId = Astro.params.id;
const { url } = Astro;
const isDev = processId === "dev";
const res = isDev ? new Response() : await fetch(`${url.origin}/api/process/${processId}`, { method: "GET" });
const data = isDev ? null : await res.json();
const quick = isDev ? quickTest() : JSON.parse(data.process);
---

<BaseLayout>
    <div class="card bg-base-200 px-4 my-4 py-6">
        <ProcessInfo title={quick.title} description={quick.description} weighting={quick.weighting}>
            <Countdown label={ t('process.proposalPhase.endTime') || '' } timeleft={ quick.proposalEnd } />
            <Countdown fromtime={new Date(quick.proposalEnd).getTime()} label={ t('process.votingPhase.lastFor') || '' } timeleft={ quick.votingEnd }/>
        </ProcessInfo>
        <proposal-list>
            <div class="proposals">
                <div class="proposal bg-base-100 card shadow-xl py-2 px-4 my-4">
                    <div class="view flex justify-between items-center">
                        <div class="flex flex-col">
            
                        </div>
                        <button class="btn btn-circle btn-ghost p-2 btn-md">
                            <Icon name="edit"/>
                        </button>
                    </div>
                    <div class="edit flex justify-between items-center" style="display: none;">
                        <div class="content flex flex-col w-full">
                            <b>{ t('process.proposal') }</b>
                            <input type="text" class="input input-bordered input-sm my-2"/>
                            <label>{ t('process.description') }</label>
                            <input type="text" class="input input-bordered input-sm my-2"/>
                        </div>
                        <button class="btn btn-circle btn-ghost p-2 m-2 btn-md">
                            <Icon name="save"/>
                        </button>
                    </div>
                </div>
            </div>
            <div class="text-center mt-2">
                <button id="add-proposal" class="btn btn-circle p-2" >
                    <Icon name="add"/>
                </button>
            </div>
        </proposal-list> 
    </div>
</BaseLayout>

<script>
    import { quickTest } from "composables/quickTestData";

    const processId = window.location.pathname.split('/process/')[1].split('/')[0]
    const isDev = processId === 'dev';

    const res = isDev ? new Response() : await fetch(`${location.origin}/api/process/${processId}`, { method: "GET" });
    const data = isDev ? null : await res.json();
    const quick = isDev ? quickTest() : JSON.parse(data.process)
    const protocol = window.location.protocol === 'http:' ? 'ws:' : 'wss:'
    const ws = new WebSocket(`${protocol}//${window.location.host}`);

    class ProposalList extends HTMLElement {
        proposal_html = null
        proposals = null
        updateProposalView(proposal, title: string, description: string) {
            const view_content = proposal.querySelector('div.view').querySelector('div')
            view_content.innerHTML = `
                <h3>${title}</h3>
                <p>${description}</p>`
        }
        updateProposalEdit(proposal, title: string, description: string) {
            const edit_content = proposal.querySelector('div.edit').querySelector('div')
            const inputs = edit_content.querySelectorAll('input')
            inputs[0].value = title
            inputs[1].value = description
        }
        addProposal(data, editing: boolean = false) {
            const proposal = this.proposal_html.cloneNode(true)
            proposal.id = data.id
            const view = proposal.querySelector('div.view')
            const edit = proposal.querySelector('div.edit')
            this.updateProposalView(proposal, data.title, data.description)
            if (editing) {
                view.style.display = 'none'
                edit.style.display = 'flex'
            }

            const edit_button = view.querySelector('button')
            edit_button.addEventListener('click', () => {
                view.style.display = 'none'
                edit.style.display = 'flex'
            })

            const edit_content = edit.querySelector('div')
            const inputs = edit_content.querySelectorAll('input')
            inputs[0].value = data.title
            inputs[1].value = data.description
            const proposalId = data.id

            inputs.forEach((input: HTMLInputElement) => {
                input.addEventListener('input', () => {
                    ws.send(JSON.stringify({
                        method: 'updateProposal',
                        title: inputs[0].value,
                        description: inputs[1].value,
                        processId,
                        proposalId
                    }))
                })

            })
            const save_button = edit.querySelector('button')
            save_button.addEventListener('click', () => {
                view.style.display = 'flex'
                edit.style.display = 'none'
                if (inputs[0].value === '' && inputs[1].value === '') {
                    ws.send(JSON.stringify({
                        method: 'removeProposal',
                        processId,
                        proposalId
                    }))     
                } else {
                    ws.send(JSON.stringify({
                        method: 'updateProposal',
                        title: inputs[0].value,
                        description: inputs[1].value,
                        processId,
                        proposalId,
                    }))         
                }
                this.updateProposalView(proposal, inputs[0].value, inputs[1].value)

            })
            this.proposals.appendChild(proposal)
        }
        constructor() {
            super()

            this.proposals = this.querySelector('div.proposals')
            this.proposal_html = this.proposals.querySelector('div.proposal').cloneNode(true)
            this.proposals.innerHTML = ""
            
            ws.onmessage = (event) => {
                let data = JSON.parse(event.data)
                if ('method' in data) {
                    if (data.method === 'addProposal') {
                        this.addProposal(data.proposal, data.edit)
                    } else if (data.method === 'removeProposal') {
                        for (const child of this.proposals.children) {
                            if (child.id === data.proposalId) {
                                this.proposals.removeChild(child)
                                break
                            }
                        }
                    }
                    else if (data.method === 'updateProposal') {
                        for (const child of this.proposals.children) {
                            if (child.id === data.proposalId) {
                                this.updateProposalView(child, data.title, data.description)
                                this.updateProposalEdit(child, data.title, data.description)
                                break
                            }
                        }
                    }
                }
            };
            ws.onopen = (event) => {
                ws.send(JSON.stringify({
                    method: 'setProcess',
                    processId
                }))
            };

            quick.proposals.forEach((proposal: any) => {
                this.addProposal(proposal)
            });

            const addButton = this.querySelector('button#add-proposal')
            addButton.addEventListener('click', async() => {
                ws.send(JSON.stringify({
                    method: 'addProposal',
                    processId
                }))                
            })
        }
    }
    customElements.define('proposal-list', ProposalList)


    const checkTime = () => {
        const time =  +new Date(quick.proposalEnd) - +new Date()
        if (time <= 0)
            window.location.href = `${window.location.origin}/process/${processId}/voting`
        else
            setTimeout(checkTime, 1000)
    }
    checkTime()

        

</script>