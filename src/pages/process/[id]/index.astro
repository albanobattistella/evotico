---
import i18next, { changeLanguage, t } from "i18next";
import ProcessLayout from "templates/ProcessLayout.astro";
import getProcessUrl from "composables/getProcessUrl";
import fetchProcessData from "composables/fetchProcessData";

changeLanguage("en");

const { url } = Astro;
const processId = Astro.params.id;
const process = await fetchProcessData(processId, url);
const pathname = `${i18next.language === "en" ? "" : `/${i18next.language}`}${getProcessUrl(process, processId)}`;
if (pathname !== url.pathname)
    return Astro.redirect(`${url.origin}${pathname}`);
---

<ProcessLayout process={process}>
    { +new Date() >= process.proposalDates[1] && +new Date() < process.votingDates[0] &&
    <div>
        <h2>{ t('process.proposals') }</h2>
        <proposal-list data-proposals={JSON.stringify(process.proposals)}>
            <div class="proposals-container"></div>
        </proposal-list>
    </div>
    }

</ProcessLayout>



<script>
    import processTest from "composables/processTestData";
    import getQuillHTML from "composables/getQuillHTML";

    const processId = window.location.pathname.split('/process/')[1].split('/')[0]
    const isDev = processId === 'dev';

    const res = isDev ? new Response() : await fetch(`${location.origin}/api/process/${processId}`, { method: "GET" });
    const data = isDev ? null : await res.json();
    const process = isDev ? processTest() : JSON.parse(data.process)
    
    const proposalStart = process.proposalDates[0]
    const votingStart = process.votingDates[0]

    const redirectToPage = (startTime: number, pageName: string) => {
        if (+new Date() < startTime) {
            const time = startTime - +new Date();
            setTimeout(() => {
                window.location.href = `${location.origin}/process/${processId}/${pageName}`;
            }, time);
        }
    }
    redirectToPage(proposalStart, 'proposals')
    redirectToPage(votingStart, 'voting')

    class ProposalList extends HTMLElement {
        constructor() {
            super();
        }

        connectedCallback() {
            this.render();
        }

        render() {
            const proposals = JSON.parse(this.getAttribute("data-proposals") || "[]");
            const proposalsContainer = this.querySelector(".proposals-container");
            
            let proposalsHTML = '';

            proposals.forEach((proposal: any) => {
            proposalsHTML += `
                <div>
                <h3>${proposal.title}</h3>
                <p>${getQuillHTML(proposal.description)}</p>
                </div>
                <br/>
            `;
            });

            proposalsContainer.innerHTML = proposalsHTML;
        }
    }

    customElements.define("proposal-list", ProposalList);

</script>