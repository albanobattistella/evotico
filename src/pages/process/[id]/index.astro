---
import i18next, { changeLanguage, t } from "i18next";
import ProcessLayout from "templates/ProcessLayout.astro";
import { processTest } from "composables/processTestData";
import { getProcessUrl } from "composables/getProcessUrl";

changeLanguage("en");

const { url } = Astro;
const processId = Astro.params.id;
const isDev = processId === "dev";
const res = isDev ? new Response() : await fetch(`${url.origin}/api/process/${processId}`, { method: "GET" });
const data = isDev ? null : await res.json();
const process = isDev ? processTest() : JSON.parse(data.process);
const pathname = `${i18next.language === "en" ? "" : `/${i18next.language}`}${getProcessUrl(process, processId)}`;
if (pathname !== url.pathname)
    return Astro.redirect(`${url.origin}${pathname}`);
---

<ProcessLayout process={process}>
    { +new Date() >= process.proposalDates[1] && +new Date() < process.votingDates[0] &&
    <div>
        <h2>{ t('process.proposals') }</h2>
        { process.proposals.map((proposal: any) => (
            <>
                <div>
                    <h3>{ proposal.title }</h3>
                    <p>{ proposal.description }</p>    
                </div>
                <br/>
            </>
        ))}
    </div>
    }

</ProcessLayout>



<script>
    import { processTest } from "composables/processTestData";

    const processId = window.location.pathname.split('/process/')[1].split('/')[0]
    const isDev = processId === 'dev';

    const res = isDev ? new Response() : await fetch(`${location.origin}/api/process/${processId}`, { method: "GET" });
    const data = isDev ? null : await res.json();
    const process = isDev ? processTest() : JSON.parse(data.process)
    
    const proposalStart = process.proposalDates[0]
    const votingStart = process.votingDates[0]

    const redirectToPage = (startTime, pageName) => {
        if (+new Date() < startTime) {
            const time = startTime - +new Date();
            setTimeout(() => {
                window.location.href = `${location.origin}/process/${processId}/${pageName}`;
            }, time);
        }
    }
    redirectToPage(proposalStart, 'proposals')
    redirectToPage(votingStart, 'voting')

</script>