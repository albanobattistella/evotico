---
import i18next, { t, changeLanguage } from "i18next";
import ProcessLayout from "@/templates/ProcessLayout.astro";
import getProcessUrl from "helpers/getProcessUrl";
import { fetchProcess } from "services/api";
import AddProposals from "@/proposals/AddProposals.astro";
import AlertList from "@/ui/AlertList.astro";
import Alert from "@/ui/Alert.astro";

changeLanguage("en");

const { url } = Astro;
const processId = Astro.params.id;
const process = await fetchProcess(processId);
const pathname = `${i18next.language === "en" ? "" : `/${i18next.language}`}${getProcessUrl(process, processId)}`;
if (pathname !== url.pathname)
    return Astro.redirect(pathname);
---

<ProcessLayout process={process}>
    <proposal-list >
        <h2>{ t('process.proposals') }</h2>
        <div class="proposals">
            <div class="proposal card outline outline-1 shadow-xl py-2 px-4 my-4">
                <div class="view flex justify-between items-center cursor-pointer">
                    <div class="content flex flex-col w-full">
                        <div class="flex flex-col"/>
                        <div class="flex">
                            <button name="edit" class="btn btn-primary  btn-sm mx-2">{ t('edit') }</button>
                        </div>
                        <br/>
                    </div>
                </div>
                <div class="edit flex justify-between items-center" style="display: none;">
                    <div class="content flex flex-col w-full">
                        <h3>{ t('process.proposal') }</h3>
                        <input type="text" class="input input-bordered input-sm my-2"/>
                        <br/>
                        <h4>{ t('process.description') }</h4>
                        <br/>
                        <div class="quill"/>
                        <br/>
                        <div class="flex">
                            <button name="save" class="btn btn-primary btn-sm mx-2">
                                { t('save') }
                            </button>
                            <button name="delete" class="btn btn-ghost text-error btn-sm mx-2">
                                { t('delete') }
                            </button>
                        </div>
                        <br/>
                    </div>
                </div>
            </div>
        </div>
        <AddProposals processId={processId}/>

        <AlertList>
            <Alert icon="checkmark-outline" success>
                { t('alert.success.websocketConnected') }
            </Alert>
            <Alert icon="warning" warning>
                { t('alert.connecting.connectingToWebsocket') }
            </Alert>
            <Alert icon="warning" error>
                { t('alert.error.errorConnectingToWebsocket') }
            </Alert>
        </AlertList>
    </proposal-list> 
</ProcessLayout>

<script>
import addAlert from 'composable/addAlert'
import type IProposal from "interfaces/IProposal"
import createQuill from "composable/createQuill";
import updateQuill from "composable/updateQuill";
import Delta from "quill"
import getQuillHTML from 'helpers/getQuillHTML'
import { fetchProcess, updateProposal, deleteProposal } from "services/api";
import Pusher from 'pusher-js/with-encryption';

const pusher = new Pusher('46272ed9caf3d816ce11', {
  cluster: 'ap1'
});

const processId = window.location.pathname.split('/process/')[1].split('/')[0]
const process = await fetchProcess(processId);


class ProposalList extends HTMLElement {
    proposal_html = null
    proposals = null
    descriptionQuills = {}
    currentAlert = null
    
    alertList = this.querySelector('div.alert-list')
    alerts = this.querySelectorAll('alert-element')

    async updateProposalAPI(method, data) {
        if (method === "delete") {
            return await deleteProposal(processId, data.id);
        } else if (method === "put") {
            return await updateProposal(processId, data.id, data);
        }
    }
    updateProposalView(proposal: any, title: string, description: Delta ) {
        const view_content = proposal.querySelector('div.view').querySelector('div.content').querySelector('.flex')
        view_content.innerHTML = `
            <h3>${title}</h3>
            <div>${getQuillHTML(description)}</div>`
    }
    
    updateProposalEdit(proposal: any, title: string, description: Delta): HTMLInputElement {
        const edit_content = proposal.querySelector('div.edit').querySelector('div')
        const inputs = [
            edit_content.querySelector("input"),
            edit_content.querySelector(".quill"),
        ];
        inputs[0].value = title
        this.descriptionQuills[inputs[1].id] = updateQuill(this.descriptionQuills[inputs[1].id], description)
        return inputs[1]
    }
    
    async updateProposal(inputs: { titleInput: HTMLInputElement; descriptionElement: HTMLElement }, proposal: HTMLElement): Promise<void> {
        const { titleInput, descriptionElement } = inputs;
        const descriptionContent = this.descriptionQuills[descriptionElement.id].getContents();
        const isEmptyDescription = JSON.stringify(descriptionContent) === '{"ops":[{"insert":"\\n"}]}';

        const proposalId = proposal.id;
        const title = titleInput.value;

        if (title === '' && isEmptyDescription) {
            try {
                await this.updateProposalAPI('delete', { id: proposalId });
            } catch (error) {
                console.error('Error deleting proposal:', error);
            }
        } else {
            try {
                await this.updateProposalAPI('put', {
                    id: proposalId,
                    title,
                    description: descriptionContent
                });
            } catch (error) {
                console.error('Error updating proposal:', error);
            }
        }

        this.updateProposalView(proposal, title, descriptionContent);
    }

    addProposal(data: IProposal, editing: boolean = false): void {
        // Clone proposal HTML element and set its ID to data ID
        const proposal = this.proposal_html.cloneNode(true) as HTMLElement;
        proposal.id = data.id;

        // Get view and edit element inside proposal element and update view with new proposal data
        const view = proposal.querySelector('div.view') as HTMLElement;
        const edit = proposal.querySelector('div.edit') as HTMLElement;

        // If editing is true, hide view, show edit
        if (editing) {
            view.style.display = 'none';
            edit.style.display = 'flex';
        }

        // Add event listener to view so that it becomes hidden when clicked and edit view becomes visible
        view.addEventListener('click', () => {
            view.style.display = 'none';
            edit.style.display = 'flex';
        });

        // Get input elements within edit content element
        const editContent = edit.querySelector('div') as HTMLElement;
        const titleInput = editContent.querySelector('input') as HTMLInputElement;
        const descriptionElement = editContent.querySelector('.quill') as HTMLElement;

        titleInput.value = data.title;
        const proposalId = data.id;

        const descriptionId = `quill-${proposalId}`; // Unique ID for the Quill editor
        descriptionElement.id = descriptionId;

        const saveButtons = Array.from(edit.querySelectorAll('button')) as HTMLButtonElement[];
        saveButtons.forEach((btn) => {
            btn.addEventListener('click', () => {
                if (btn.name === 'delete') {
                    titleInput.value = '';
                    const quillInstance = this.descriptionQuills[descriptionElement.id];
                    if (quillInstance) {
                        quillInstance.setText('');
                    }
                }

                view.style.display = 'flex';
                edit.style.display = 'none';

                this.updateProposal({ titleInput, descriptionElement }, proposal);
            });
        });

        this.proposals.appendChild(proposal);

        // Create a Quill editor for the description field
        let quill = createQuill('#' + descriptionId);
        quill = updateQuill(quill, data.description)

        this.updateProposalView(proposal, data.title, quill);
        this.descriptionQuills[descriptionId] = quill;

        titleInput.addEventListener('input', () => {
            this.updateProposal({ titleInput, descriptionElement }, proposal);
        });
    }


    constructor() {
        super();
        
        // Find the proposals container and clone a proposal template.
        this.proposals = this.querySelector('div.proposals');
        this.proposal_html = this.proposals.querySelector('div.proposal').cloneNode(true);
        this.proposals.innerHTML = "";

        // Add existing proposals to the UI.
        process.proposals.forEach((proposal: any) => {
            this.addProposal(proposal);
        });

        pusher.subscribe(`process-${processId}`).bind('proposal-added', (data) => {
            this.addProposal(data.proposal, !data.proposal.title);
        });

        pusher.bind('proposal-removed', (data) => {
            for (const child of this.proposals.children) {
                if (child.id === data.proposalId) {
                    this.proposals.removeChild(child);
                    break;
                }
            }
        });


        pusher.bind('proposal-updated', (data) => {
            for (const child of this.proposals.children) {
                if (child.id === data.proposalId) {
                    this.updateProposalEdit(child, data.title, data.description);
                    this.updateProposalView(child, data.title, data.description);
                    break;
                }
            }
        });
    }
}
customElements.define('proposal-list', ProposalList)


const checkTime = () => {
    const time =  process.proposalDates[1] - +new Date()
    if (time <= 0)
        window.location.href = `${window.location.origin}/process/${processId}/voting`
    else
        setTimeout(checkTime, time)
}
checkTime()

    

</script>