---
import i18next, { t, changeLanguage } from "i18next";
import ProcessLayout from "templates/ProcessLayout.astro";
import processTest from "composables/processTestData";
import getProcessUrl from "composables/getProcessUrl";
import fetchProcessData from "composables/fetchProcessData"

changeLanguage("en");

const { url } = Astro;
const processId = Astro.params.id;
const process = fetchProcessData(processId, url);
if (process === null)
    return Astro.redirect("/");
const pathname = `${i18next.language === "en" ? "" : `/${i18next.language}`}${getProcessUrl(process, processId)}`;
if (pathname !== url.pathname)
    return Astro.redirect;
console.log(process);
---

<ProcessLayout process={process}>
    <proposal-list>
        <h2>{ t('process.proposals') }</h2>
        <div class="proposals">
            <div class="proposal bg-base-100 card shadow-xl py-2 px-4 my-4">
                <div class="view flex justify-between items-center cursor-pointer">
                    <div class="content flex flex-col w-full">
                        <div class="flex flex-col"/>
                        <div class="flex">
                            <button name="edit" class="btn btn-primary  btn-sm mx-2">{ t('edit') }</button>
                        </div>
                    </div>
                </div>
                <div class="edit flex justify-between items-center" style="display: none;">
                    <div class="content flex flex-col w-full">
                        <b>{ t('process.proposal') }</b>
                        <input type="text" class="input input-bordered input-sm my-2"/>
                        <label>{ t('process.description') }</label>
                        <div id="-1" class="quill"/>
                        <br/>
                        <div class="flex">
                            <button name="save" class="btn btn-primary btn-sm mx-2">
                                { t('save') }
                            </button>
                            <button name="delete" class="btn btn-ghost text-error btn-sm mx-2">
                                { t('delete') }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <span class="flex items-center justify-between">
            <button id="add-proposal" class="btn p-2" >
                { t('process.addProposal') }
            </button>
            <div class="dropdown">
                <label tabindex="0" class="btn m-1">{ t('addProposalTemplate') }</label>
                <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                  <li><a class="template-proposal flex flex-col">
                    <b class="title">{ t('proposal.zero.title') }</b>
                    <p class="description">{ t('proposal.zero.description') }</p>
                  </a></li>
                  <li><a class="template-proposal flex flex-col">
                    <b class="title">{ t('proposal.one.title') }</b>
                    <p class="description">{ t('proposal.one.description') }</p>
                  </a></li>
                </ul>
              </div>
        </span>
    </proposal-list> 
</ProcessLayout>

<script>
    import IProposal from "interfaces/IProposal"
    import processTest from "composables/processTestData";
    import { createQuill } from "composables/quillEditor";

    const processId = window.location.pathname.split('/process/')[1].split('/')[0]
    const isDev = processId === 'dev';

    const res = isDev ? new Response() : await fetch(`${location.origin}/api/process/${processId}`, { method: "GET" });
    const data = isDev ? null : await res.json();
    const process = isDev ? processTest() : JSON.parse(data.process)
    const protocol = window.location.protocol === 'http:' ? 'ws:' : 'wss:'
    const ws = new WebSocket(`${protocol}//${window.location.host}`);

    class ProposalList extends HTMLElement {
        proposal_html = null
        proposals = null
        template_proposals = this.querySelectorAll('.template-proposal')
        
        updateProposalView(proposal: any, title: string, description: string) {
            const view_content = proposal.querySelector('div.view').querySelector('div.content').querySelector('.flex')
            view_content.innerHTML = `
                <h3>${title}</h3>
                <p>${description}</p>`
        }
        
        updateProposalEdit(proposal: any, title: string, description: string) {
            const edit_content = proposal.querySelector('div.edit').querySelector('div')
            const inputs = [
                edit_content.querySelector("input"),
                edit_content.querySelector(".quill")
            ];
            inputs[0].value = title
            inputs[1].innerHTML = description
        }
        
        updateProposal(inputs: any[], proposal: IProposal) {
            if (inputs[0].value === '' && inputs[1].innerHTML === '') {
                ws.send(JSON.stringify({
                    method: 'removeProposal',
                    proposalId: proposal.id,
                    processId
                }));
            } else {
                ws.send(JSON.stringify({
                    method: 'updateProposal',
                    title: inputs[0].value,
                    description: inputs[1].innerHTML,
                    proposalId: proposal.id,
                    processId
                }));
            }
            this.updateProposalView(proposal, inputs[0].value, inputs[1].innerHTML);
        }

        addProposal(data: IProposal, editing: boolean = false) {
            // Clone proposal HTML element and set its ID to data ID
            const proposal = this.proposal_html.cloneNode(true);
            proposal.id = data.id;
            
            // Get view and edit element inside proposal element and update view with new proposal data
            const view = proposal.querySelector('div.view');
            const edit = proposal.querySelector('div.edit');
            this.updateProposalView(proposal, data.title, data.description)
            
            // If editing is true, hide view, show edit
            if (editing) {
              view.style.display = 'none'
              edit.style.display = 'flex'
            }
            
            // Add event listener to view so that it becomes hidden when clicked and edit view becomes visible
            view.addEventListener('click', () => {
              view.style.display = 'none'
              edit.style.display = 'flex'
            })
            
            // Get input elements within edit content element and add keyup event listener
            const edit_content = edit.querySelector('div')
            const inputs = [
              edit_content.querySelector('input'),
              edit_content.querySelector('.quill')
            ];
              
            inputs[0].value = data.title
            const proposalId = data.id
            
            const descriptionId = `quill-${proposalId}`; // Unique ID for the Quill editor
            inputs[1].id = descriptionId;
            inputs[1].innerHTML = data.description
 

            inputs[0].addEventListener('input', () => {
                ws.send(JSON.stringify({
                    method: 'updateProposal',
                    title: inputs[0].value,
                    description: inputs[1].innerHTML,
                    processId,
                    proposalId
                }))
            })

            const save_buttons = edit.querySelectorAll('button')
            save_buttons.forEach((btn: HTMLButtonElement) => {
                btn.addEventListener('click', () => {
                    if (btn.name === 'delete') {
                        inputs[0].value = ''
                        inputs[1].innerHTML = ''
                    }

                    view.style.display = 'flex';
                    edit.style.display = 'none';

                    this.updateProposal(inputs, proposal)
                })
            })
            this.proposals.appendChild(proposal)

            // Create a Quill editor for the description field
        
            const quill = createQuill('#' + descriptionId);
        }
        constructor() {
            super();

            // Find the proposals container and clone a proposal template.
            this.proposals = this.querySelector('div.proposals');
            this.proposal_html = this.proposals.querySelector('div.proposal').cloneNode(true);
            this.proposals.innerHTML = "";

            // Listen for WebSocket events.
            ws.onmessage = (event) => {
                const data = JSON.parse(event.data);
                if ('method' in data) {
                    if (data.method === 'addProposal') {
                        // Add a new proposal.
                        this.addProposal(data.proposal, data.proposal.title ? false : data.edit);
                    } else if (data.method === 'removeProposal') {
                        // Remove a proposal.
                        for (const child of this.proposals.children) {
                            if (child.id === data.proposalId) {
                                this.proposals.removeChild(child);
                                break;
                            }
                        }
                    } else if (data.method === 'updateProposal') {
                        // Update a proposal.
                        for (const child of this.proposals.children) {
                            if (child.id === data.proposalId) {
                                this.updateProposalView(child, data.title, data.description);
                                this.updateProposalEdit(child, data.title, data.description);
                                break;
                            }
                        }
                    }
                }
            };

            ws.onopen = (event) => {
                // Set the process ID when the WebSocket connection is opened.
                ws.send(JSON.stringify({
                    method: 'setProcess',
                    processId
                }));
            };

            // Add existing proposals to the UI.
            process.proposals.forEach((proposal: any) => {
                this.addProposal(proposal);
            });

            // Listen for the "Add Proposal" button click event.
            const addButton = this.querySelector('button#add-proposal');
            addButton.addEventListener('click', async() => {
                ws.send(JSON.stringify({
                    method: 'addProposal',
                    processId
                }));
            });

            // Listen for the proposal template click events.
            this.template_proposals.forEach((template) => {
                template.addEventListener('click', async() => {
                    const title = template.querySelector('.title').innerHTML;
                    const description = template.querySelector('.description').innerHTML;
                    ws.send(JSON.stringify({
                        method: 'addProposal',
                        title,
                        description,
                        processId
                    }));
                });
            });
        }
    }
    customElements.define('proposal-list', ProposalList)


    const checkTime = () => {
        const time =  process.proposalDates[1] - +new Date()
        if (time <= 0)
            window.location.href = `${window.location.origin}/process/${processId}/voting`
        else
            setTimeout(checkTime, time)
    }
    checkTime()

        

</script>