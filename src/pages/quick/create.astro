---
import BaseLayout from "templates:BaseLayout";
import TimeSelector from "molecules:TimeSelector";
import { weightingOptions } from "composables/weightingOptions";
import { t, changeLanguage } from "i18next";
import WeightingInfo from "molecules:WeightingInfo";
import Alert from "molecules:Alert";
import AlertManager from "organisms:AlertManager";
import DefaultProposalInfo from "molecules:DefaultProposalInfo";

changeLanguage("en");

const weightOptions = weightingOptions();
const topicDescription = "";
const topicQuestion = "";
const weighting = weightOptions[2].value;
const defaultProposals = "";
const proposals = [
    {
        title: t("proposal.zero.title"),
        description: t("proposal.zero.description"),
    },
    {
        title: t("proposal.one.title"),
        description: t("proposal.one.description"),
    },
];
---

<BaseLayout>

  <h1>{ t('quick.title')  }</h1>
  <quick-form data-proposals={JSON.stringify(proposals)}>
    <p>{ t('quick.topic') }</p>
    <input name="topicQuestion" class="input input-bordered w-full" value={topicQuestion} type="text">
    <br>
    <p>{ t('quick.description') }</p>
    <textarea name="topicDescription" class="textarea textarea-bordered w-full" value={topicDescription} />
    <br><br>
    <span>{ t('quick.weighting') }</span>
    <span class="flex justify-center items-center">
      <select name="weighting" class="select" value={weighting}>
        { weightOptions.map((weight) => 
          <option selected={weighting === weight.value} value={weight.value}>{ weight.label }</option>
        )}
      </select>
      <WeightingInfo />
    </span>
    <br>
    <TimeSelector/>
    <div class="flex justify-around align-center items-center">
      <div class="flex justify-center items-center">
        <input name="defaultProposals" type="checkbox" checked={defaultProposals} class="checkbox" />

        <span>&nbsp;{ t('quick.addDefaultProposals') }</span>
        <DefaultProposalInfo />
      </div>
    </div>
    <br/>
    <AlertManager>
      <Alert type="error" icon="warning" label={ t('alert.quick.error.topicQuestion') } />
      <Alert type="success" icon="checkmark-outline" label={ t('alert.quick.success.createProcess') } />
    </AlertManager>
    <br/>
    <div class="text-center">
      <button id="submit" type="submit" class="btn btn-primary">
        { t('create') }
      </button>
    </div>
    
    <br/>

  </quick-form>
</BaseLayout>

<script>
  import { addAlert } from 'composables/addAlert'

  class QuickForm extends HTMLElement {
    form = {}
    alertList = this.querySelector('div.alert-manager').querySelector('div.alert-list')
    alerts = this.querySelector('div.alert-manager').querySelectorAll('div.alert')
    findValues(inputs: NodeListOf<any>) {
      Array.from(inputs).forEach((input) => {
        if(input.name) {
          if (input.type === "checkbox")
            this.form[input.name] = input.checked
          else
            this.form[input.name] = input.value
        }
      })
    }

    constructor() {
      super()
      const buttons = this.querySelectorAll('button')
      const inputs = this.querySelectorAll('input')
      const textareas = this.querySelectorAll('textarea')
      const selectors = this.querySelectorAll('select')

      const proposals = JSON.parse(this.dataset.proposals)
      const button = Array.from(buttons).find(btn => btn.id === 'submit')
      
      button.addEventListener('click', async() => {
        this.form = {}
        this.findValues(inputs)
        this.findValues(textareas)
        this.findValues(selectors)
        const lang = document.documentElement.lang
        if (this.form['topicQuestion'] === '') {
          addAlert(this.alertList, this.alerts[0].cloneNode(true))
        }
        else {
          addAlert(this.alertList, this.alerts[1].cloneNode(true))

          this.form['strategy'] = 1
          this.form['proposals'] = this.form['defaultProposals'] ? proposals : [] 
          
          if (import.meta.env.DEV) {
            window.location.href = `/${lang !== 'en' ? lang + '/' : '' }quick/dev/proposals`
          }
          else {
            const res = await fetch(`${location.origin}/api/quick/process`, {
              method: "POST",
              headers: {'Content-Type':'application/json'},
              body: JSON.stringify(this.form)
            });
            const json = await res.json();
            window.location.href = `/${lang !== 'en' ? lang + '/' : '' }quick/${json.id}/proposals`
          }
        }
      })
    }
  }
  customElements.define('quick-form', QuickForm)

</script>