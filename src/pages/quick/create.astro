---
import BaseLayout from "templates:BaseLayout";
import TimeSelector from "molecules:TimeSelector";
import { weightingOptions } from "composables/weightingOptions";
import { t, changeLanguage } from "i18next";
import WeightingInfo from "molecules:WeightingInfo";
import DefaultProposalInfo from "molecules:DefaultProposalInfo";

changeLanguage("en");

const weightOptions = weightingOptions();
const topicDescription = "";
const topicQuestion = "";
const weighting = weightOptions[2].value;
const defaultProposals = true;
const limitProposals = false;
const maxProposals = 10;
const proposals = [
  {
    id: 0,
    title: t('proposal.zero.title'),
    description: t('proposal.zero.description'),
    lastUpdate: +new Date(),
  },
  {
    id: 1,
    title: t('proposal.one.title'),
    description: t('proposal.zero.description'),
    lastUpdate: +new Date(),
  },
]
---


<BaseLayout>

  <h1>{ t('quick.title')  }</h1>
  <quick-form data-proposals={JSON.stringify(proposals)}>
    <p>{ t('quick.topic') }</p>
    <input name="topicQuestion" class="input w-full" value={topicQuestion} type="text">
    <br>
    <p>{ t('quick.description') }</p>
    <textarea name="topicDescription" class="textarea w-full" value={topicDescription} />
    <br><br>
    <span>{ t('quick.weighting') }</span>
    <span class="flex justify-center items-center">
      <select name="weighting" class="select" value={weighting}>
        { weightOptions.map((weight) => 
          <>
            <option selected={weighting === weight.value} value={weight.value}>{ weight.label }</option>
          </>
        )}
      </select>
      <WeightingInfo />
    </span>
    <br>
    <TimeSelector/>
    <div class="flex justify-around align-center items-center">
      <div class="flex justify-center items-center">
        <input name="defaultProposals" type="checkbox" checked={defaultProposals} class="checkbox" />

        <span>&nbsp;{ t('quick.addDefaultProposals') }</span>
        <DefaultProposalInfo />
      </div>
    </div>
    <br>
    <div class="text-center">
      <button id="submit" type="submit" class="btn btn-primary">
        { t('create') }
      </button>
    </div>
  </quick-form>
</BaseLayout>

<script>
  class QuickForm extends HTMLElement {
    form = {}
    findValues(inputs: NodeListOf<any>) {
      Array.from(inputs).forEach((input) => {
        if(input.name) {
          if (input.type === "checkbox")
            this.form[input.name] = input.checked
          else
            this.form[input.name] = input.value
        }
      })
    }
    constructor() {
        super()
        const buttons = this.querySelectorAll('button')
        const inputs = this.querySelectorAll('input')
        const textareas = this.querySelectorAll('textarea')
        const selectors = this.querySelectorAll('select')
        const proposals = JSON.parse(this.dataset.proposals)
        const button = Array.from(buttons).find((btn) => btn.id === 'submit')

        button.addEventListener('click', () => {
          this.form = {}
          this.findValues(inputs)
          this.findValues(textareas)
          this.findValues(selectors)
          const lang = document.documentElement.lang
          if (this.form['topicQuestion'] === '') {
            console.log('error')
          }
          else {
            this.form['strategy'] = 1
            this.form['proposals'] = this.form.defaultProposals ? proposals : [] 
            console.log(this.form)
            console.log(proposals)

            const xhr = new XMLHttpRequest();
            xhr.onreadystatechange = (() => {
              if (xhr.readyState === 4) {
                const id = JSON.parse(xhr.response)['id']
               // window.location.href = `/${lang !== 'en' ? lang + '/' : '' }quick/${id}/proposals`
              }
            })
            xhr.open("POST", '/quick/process', true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(JSON.stringify(this.form))

          }

        })
    }
  }
  customElements.define('quick-form', QuickForm)


</script>