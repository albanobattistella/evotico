---
import { Icon } from "astro-icon";
import { t, changeLanguage } from "i18next";
import BaseLayout from "templates:BaseLayout";
import Countdown from "molecules:Countdown";

changeLanguage("en");

const processId = Astro.params.id;
const { request, url } = Astro;
const res = await fetch(`${url.origin}/quick/process/${processId}`, { method: "GET" });
const data = await res.json();
const quick = JSON.parse(data.process);
---

<BaseLayout>
    <div class="mt-5">
        <div class="flex flex-col px-4 pb-3">
            <h1>{ quick.title }</h1>
            <p>{ quick.description }</p>
            <div id="infoCard" class="flex flex-wrap items-center justify-center">
                <Countdown label={ t('quick.proposalEndTime') } timeleft={ quick.proposalEnd } />
                <Countdown fromtime={new Date(quick.proposalEnd).getTime()} label={ t('quick.votingLastFor') } timeleft={ quick.votingEnd }/>
                <!--WeightingCard class="m-2 px-3 rounded w-55 h-40" :weighting-label="weightOptions[quick.weighting - 1].label" /-->
            </div>
        </div>
        <proposal-list>
            <div class="proposal">
                <div class="flex justify-between items-center">
                    <div class="content flex flex-col">
                        <h3></h3>
                        <p></p>
                    </div>
                    <div>
                        <button class="btn btn-circle btn-ghost p-2 btn-lm">
                            <Icon name="carbon:edit"/>
                        </button>
                    </div>
                </div>
            </div>
        </proposal-list>
         
        <div class="text-center">
            <button class="btn btn-circle p-2" >
                <Icon name="carbon:add"/>
            </button>
        </div>
    </div>
</BaseLayout>

<script>
    const processId = window.location.pathname.split('/quick/')[1].split('/')[0]
    const res = await fetch(`${location.origin}/quick/process/${processId}`, { method: "GET" });
    const data = await res.json();
    const quick = JSON.parse(data.process)
    console.log(quick.proposals)


    class ProposalList extends HTMLElement {
        proposal_html = null
        constructor() {
            super()
            this.proposal_html = this.getElementsByClassName('proposal')[0]
            this.innerHTML = ""
            quick.proposals.forEach(data => {
                let proposal = this.proposal_html.cloneNode(true)
                let content = proposal.getElementsByClassName('content')[0]
                let title = content.querySelector('h3')
                title.innerHTML = data.title
                let description = content.querySelector('p')
                description.innerHTML = data.description
                this.innerHTML += proposal.innerHTML
            });

        }
    }
    customElements.define('proposal-list', ProposalList)

        
</script>