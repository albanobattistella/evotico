---
import { Icon } from "astro-icon";
import { t, changeLanguage } from "i18next";
import BaseLayout from "templates:BaseLayout";
import Countdown from "molecules:Countdown";

changeLanguage("en");

const processId = Astro.params.id;
const { request, url } = Astro;
const res = await fetch(`${url.origin}/quick/process/${processId}`, { method: "GET" });
const data = await res.json();
const quick = JSON.parse(data.process);
---

<BaseLayout>
    <div class="mt-5">
        <div class="flex flex-col px-4 pb-3">
            <h1>{ quick.title }</h1>
            <p>{ quick.description }</p>
            <div id="infoCard" class="flex flex-wrap items-center justify-center">
                <Countdown label={ t('quick.proposalEndTime') } timeleft={ quick.proposalEnd } />
                <Countdown fromtime={new Date(quick.proposalEnd).getTime()} label={ t('quick.votingLastFor') } timeleft={ quick.votingEnd }/>
                <!--WeightingCard class="m-2 px-3 rounded w-55 h-40" :weighting-label="weightOptions[quick.weighting - 1].label" /-->
            </div>
        </div>
        <proposal-list>
            <div class="proposal">
                <div class="view flex justify-between items-center">
                    <div class="flex flex-col">
        
                    </div>
                    <button class="btn btn-circle btn-ghost p-2 btn-md">
                        <Icon name="carbon:edit"/>
                    </button>
                </div>
                <div class="edit flex justify-between items-center" style="display: none;">
                    <div class="content flex flex-col">
                        <input type="text" class="input input-sm my-2"/>
                        <input type="text" class="input input-sm my-2"/>
                    </div>
                    <button class="btn btn-circle btn-ghost p-2 btn-md">
                        <Icon name="carbon:save"/>
                    </button>
                </div>
            </div>
        </proposal-list>
         
        <div class="text-center">
            <button class="btn btn-circle p-2" >
                <Icon name="carbon:add"/>
            </button>
        </div>
    </div>
</BaseLayout>

<script>
    const processId = window.location.pathname.split('/quick/')[1].split('/')[0]
    const res = await fetch(`${location.origin}/quick/process/${processId}`, { method: "GET" });
    const data = await res.json();
    const quick = JSON.parse(data.process)
    console.log(quick.proposals)


    class ProposalList extends HTMLElement {
        proposal_html = null
        constructor() {
            super()
            this.proposal_html = this.getElementsByClassName('proposal')[0]
            console.log(this.proposal_html)
            this.innerHTML = ""
            quick.proposals.forEach(data => {
                const proposal = this.proposal_html.cloneNode(true)
                const view = proposal.querySelector('div.view')
                const edit = proposal.querySelector('div.edit')
                const view_content = view.querySelector('div')
                view_content.innerHTML = `
                    <h3>${data.title}</h3>
                    <p>${data.description}</p>
                `
                
                const button1 = view.querySelector('button')
                button1.addEventListener('click', () => {
                    console.log('hi ' + data.title)
                    view.style.display = 'none'
                    edit.style.display = 'flex'

                })

                const edit_content = edit.querySelector('div')
                const inputs = edit_content.querySelectorAll('input')
                inputs[0].value = data.title
                inputs[1].value = data.description

                const button2 = edit.querySelector('button')
                button2.addEventListener('click', () => {
                    console.log('hi ' + data.title)
                    view.style.display = 'flex'
                    edit.style.display = 'none'

                })
                this.appendChild(proposal)
            });

        }
    }
    customElements.define('proposal-list', ProposalList)

        
</script>