---
import BaseLayout from "templates:BaseLayout";
import InfoCard from "organisms:QuickInfoCard";
import { Icon } from "astro-icon";

import { quickTest } from "composables/quickTestData";
import { t } from "i18next";

const processId = Astro.params.id;
const { url } = Astro;
const isDev = processId === 'dev';

const res = isDev ? new Response() : await fetch(`${url.origin}/api/quick/process/${processId}`, { method: "GET" });
const data = isDev ? null : await res.json();
const quick = isDev ? quickTest() : JSON.parse(data.process);
console.log(quick)


const findTotal = (proposalId: string) => {
  return quick.voters.reduce((sum: number, voter: any) => {
    const matchingVote = voter.votes.find((vote: any) => vote.proposalId === proposalId)
    if (matchingVote) {
      return sum + matchingVote.vote
    }
    return sum
  }, 0)
}

const findAverage = (total: number) => {
    return total / quick.voters.length
}
---
<style>
    .hide {
        display: none;
    }
</style>

<BaseLayout>
    <div class="card bg-base-200 px-6 my-4 py-6">
        <InfoCard title={quick.title} description={quick.description} weighting={quick.weighting}>

        </InfoCard>
        <results-card class="card bg-base-100 p-4 m-2">
            <div class="tabs flex flex-nowrap w-full justify-between">
                <a class="tab tab-bordered tab-active w-full h-12"><Icon width="16" name="face-cool"/></a> 
                <a class="tab tab-bordered w-full h-12"><Icon width="16" name="list"/></a> 
                <a class="tab tab-bordered w-full h-12"><Icon width="16" name="settings"/></a>
            </div>

            <div class="tab-content hide">
                <h2>{ t('quick.results') }</h2>
                <h3>{ t('quick.voters') } ({ quick.voters.length }):</h3>
                <div class="flex justify-around">
                    { quick.voters.map((voter: any) => (
                        <div class="flex items-center p-1">
                            <input type="checkbox" checked="checked" class="checkbox" />
                            <span class="m-1">
                                { voter.name }
                            </span>
                        </div>
                    ))}
                </div>
                <br/>
                <div class="overflow-x-auto">
                    <table class="table w-full">
                      <!-- head -->
                      <thead>
                        <tr>
                          <th></th>
                          <th>{ t('quick.proposal') }</th>
                          <th>{ t('quick.average') }</th>
                          <th>{ t('quick.total') }</th>
                        </tr>
                      </thead>
                      <tbody>
                        
                        { quick.proposals.map((proposal, index) => (
                            <tr>
                                <th>{ index + 1}</th>
                                <td>
                                    <h3>{ proposal.title }</h3>
                                    <p>{ proposal.description }</p>
                                </td>
                                <td>{ findAverage(proposal.id) }</td>
                                <td>{ findTotal(proposal.id) }</td>
                            </tr>
                       ))}
                      </tbody>
                    </table>
                  </div>
                  
            </div>
            <div class="tab-content hide">
                <div>

                </div>
            </div>
            <div class="tab-content hide">
                <div>

                </div>
            </div>
        </results-card>
    </div>
</BaseLayout>
<script>
    class ResultsCard extends HTMLElement {
        constructor() {
            super()
            const tabs = this.querySelectorAll('a.tab')
            const contents = this.querySelectorAll('div.tab-content')
            for (const [i, tab] of tabs.entries()) {
                tab.addEventListener('click', () => {
                    contents.forEach(content => content.classList.add('hide'))
                    tabs.forEach(tab => tab.classList.remove('tab-active'))
                    tab.classList.add('tab-active')
                    contents[i].classList.remove('hide')
                })

                if (tab.classList.contains('tab-active')) {
                    contents[i].classList.remove('hide')
                } else {
                    contents[i].classList.add('hide')
                }
            }


        }
    }
    customElements.define('results-card', ResultsCard)
</script>