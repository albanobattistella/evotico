---
import BaseLayout from "templates:BaseLayout";
import InfoCard from "organisms:QuickInfoCard";
import { Icon } from "astro-icon";
import { quickTest } from "composables/quickTestData";
import { t, changeLanguage } from "i18next";

changeLanguage("en");

const processId = Astro.params.id;
const { url } = Astro;
const isDev = processId === "dev";
const res = isDev ? new Response() : await fetch(`${url.origin}/api/quick/process/${processId}`, { method: "GET" });
const data = isDev ? null : await res.json();
const quick = isDev ? quickTest() : JSON.parse(data.process);
const emojis = ["rage", "angry", "sad", "neutral", "smiling", "happy", "loving"];
---
<style>
    .hide {
        display: none;
    }

</style>

<BaseLayout>
    <div class="card bg-base-200 px-6 my-4 py-6">
        <InfoCard title={quick.title} description={quick.description} weighting={quick.weighting}>

        </InfoCard>
        <results-card class="card bg-base-100 p-4 m-2">
            <div class="hide">
                { emojis.map(emoji => (
                    <Icon class="emoji" name={emoji} width="48" />
                ))}
            </div>
            <div class="tabs flex flex-nowrap w-full justify-between">
                <a class="tab tab-bordered tab-active w-full h-12"><Icon width="16" name="face-cool"/></a> 
                <a class="tab tab-bordered w-full h-12"><Icon width="16" name="list"/></a> 
                <a class="tab tab-bordered w-full h-12"><Icon width="16" name="settings"/></a>
            </div>

            <div class="tab-content hide">
                <h2>{ t('quick.results') }</h2>
                <h3 >{ t('quick.voters') } <span class="num-voters">({ quick.voters.length })</span>:</h3>
                <div class="flex justify-around flex-wrap">
                    { quick.voters.map((voter: any) => (
                        <div class="flex items-center p-2">
                            <input id={voter.id} type="checkbox" checked class="voter checkbox checkbox-xs" />
                            <span class="m-1">
                                { voter.name }
                            </span>
                        </div>
                    ))}
                </div>
                <br/>
                <div class="overflow-x-auto">
                    <table class="table w-full">
                      <!-- head -->
                      <thead>
                        <tr>
                          <td></td>
                          <th>{ t('quick.proposal') }</th>
                          <th >{ t('quick.averageScore') }</th>
                          <th>{ t('quick.totalScore') }</th>
                        </tr>
                      </thead>
                      <tbody class="proposal-list">
                      </tbody>
                    </table>
                  </div>
                  
            </div>
            <div class="tab-content hide">
                <div>

                </div>
            </div>
            <div class="tab-content hide">
                <div>

                </div>
            </div>
        </results-card>
        <br/>
        <div class="card">
            <h3>{ t('quick.exportData') }</h3>
            <div class="flex justify-around">
                <button class="btn btn-ghost">Markdown</button>
                <button class="btn btn-ghost">JSON</button>
                <button class="btn btn-ghost">Image</button>
            </div>
        </div>
    </div>
</BaseLayout>
<script>
    import { quickTest } from "composables/quickTestData";
    const processId = window.location.pathname.split('/quick/')[1].split('/')[0]
    const isDev = processId === 'dev';
    const res = isDev ? new Response() : await fetch(`${location.origin}/api/quick/process/${processId}`, { method: "GET" });
    const data = isDev ? null : await res.json();
    const quick = isDev ? quickTest() : JSON.parse(data.process)
    
    

    const getHighlighting = (className: string) => {
        if (className === "color-0") {
            return "rgba(205, 92, 92, 0.3)";
        }
        else if (className === "color-1") {
            return "rgba(205, 92, 92, 0.2)";
        }
        else if (className === "color-2") {
            return "rgba(205, 92, 92, 0.1)";
        }
        else {
            return "";
        }
    };

    class ResultsCard extends HTMLElement {
        voters = this.querySelectorAll('input.voter')
        proposal_list = this.querySelector('tbody.proposal-list')
        emojis = this.querySelectorAll('svg.emoji')
        getTotal(proposalId: string, selectedVoters) {
            return selectedVoters.reduce((sum: number, voter: any) => {
                const quick_voter = quick.voters.find((vote: any) => vote.id === voter.id)
                const matchingVote = quick_voter.votes.find((vote: any) => vote.proposalId === proposalId);
                if (matchingVote) {
                    let v = matchingVote.vote;
                    if (v < 0)
                        v *= quick.weighting;
                    return sum + v;
                }
            
                return sum;
            }, 0);
        };

        getAverageScore(total: number, voters) {
            if (voters.length > 0) {
                let i = total / voters.length;
                return Math.round(i * 100) / 100
            }
            return 0
        }

        getAverageEmoji(total: number, voters) {
            let i = this.getAverageScore(total, voters)
            if (i < 0)
                i /= quick.weighting;
            i = Math.round(i)
            return this.emojis[i + 3];
        };
        

        updateTable() {
            const selectedVoters = Array.from(this.voters).filter((vote: HTMLInputElement) => vote.checked)
            const proposals = quick.proposals
            this.querySelector('span.num-voters').innerHTML = `(${selectedVoters.length})`
            proposals.forEach((proposal: any) => {
                proposal["total"] = this.getTotal(proposal.id, selectedVoters);
            });
            const sortedProposals = proposals.sort((a, b) => {
                return b.total - a.total;
            });
            this.proposal_list.innerHTML = ''

            let rank = 0
            let prevProposal = null
            sortedProposals.forEach((proposal: any, index: number) => {
                if (prevProposal)
                    rank += prevProposal.total === proposal.total ? 0 : 1
                prevProposal = proposal
                let row = document.createElement('tr')
                row.className = 'color-' + rank
                row.innerHTML += `
                    <td>${index + 1}</td>
                    <td>
                        <h3>${ proposal.title }</h3>
                        <p>${ proposal.description }</p>
                    </td>
                    <td align="center">
                        <div class="emoji-container tooltip cursor-pointer tooltip-left" data-tip=${ this.getAverageScore(proposal.total, selectedVoters) }>`

                row.querySelector('div.emoji-container').appendChild(this.getAverageEmoji(proposal.total, selectedVoters))

                row.innerHTML += `
                        </div>
                    </td>
                    <td align="center">${ proposal.total }</td>
                `

                this.proposal_list.appendChild(row)
            })

            const items = this.proposal_list.querySelectorAll('tr')
            items.forEach((item, index) => {
                const rows = item.querySelectorAll('td')
                rows.forEach((row) => {
                    row.style.backgroundColor = getHighlighting(item.className);
                })
            })

        }
        constructor() {
            super()
            const tabs = this.querySelectorAll('a.tab')
            const contents = this.querySelectorAll('div.tab-content')
            for (const [i, tab] of tabs.entries()) {
                tab.addEventListener('click', () => {
                    contents.forEach(content => content.classList.add('hide'))
                    tabs.forEach(tab => tab.classList.remove('tab-active'))
                    tab.classList.add('tab-active')
                    contents[i].classList.remove('hide')
                })

                if (tab.classList.contains('tab-active')) {
                    contents[i].classList.remove('hide')
                } else {
                    contents[i].classList.add('hide')
                }
            }

            this.voters.forEach((voter: HTMLInputElement) => {
                voter.addEventListener('click', () => {
                    this.updateTable()
                })
            });

            this.updateTable()


        }
    }
    customElements.define('results-card', ResultsCard)
</script>