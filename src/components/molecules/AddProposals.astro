---
import { t } from 'i18next';
import dropdownOptions from 'composables/proposalTemplates'

interface Props {
    processId?: string
}

const { processId } = Astro.props;
---


<add-proposal class="flex items-center flex-wrap" data-process={processId}>    
  <button id="add-button" class="btn p-2">{ t('process.addProposal') }</button>
  <div class="dropdown">
    <label tabindex="0" class="btn m-1">{ t('addProposalTemplate') }</label>
    <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box">
      {dropdownOptions.map(option => (
        <li>
          <a class="flex flex-col">
            <b class="title">{option.title}</b>
            <p class="description">{option.description.ops[0].insert}</p>
          </a>
        </li>
      ))}
    </ul>
  </div>
</add-proposal>


<script>
  import { process } from 'stores/processStore';
  import dropdownOptions from 'composables/proposalTemplates'


  const addProposal = (template = null) => {
    const $process = process.get();

    const proposals = JSON.parse(JSON.stringify($process.proposals));
    proposals.push(
      template !== null
        ? dropdownOptions[template]
        : {
            title: '',
            description: {ops: [{"insert": ""}]},
          }
    );
    process.setKey('proposals', proposals);
  };

  class AddProposal extends HTMLElement {
    isWrapping = false;
    processId = null;
    checkIsWrapping() {
      this.isWrapping = window.innerWidth <= 767;
      this.updateClassList();
    }

    updateClassList() {
      if (this.isWrapping) {
        this.classList.add('justify-center');
        this.classList.remove('justify-between');
      } else {
        this.classList.add('justify-between');
        this.classList.remove('justify-center');
      }
    }
 
    destroy() {
      window.removeEventListener('resize', this.checkIsWrapping.bind(this));
    }

    constructor() {
      super();
      this.processId = this.dataset.process;
      const addButton = this.querySelector('#add-button');
      const dropdownItems = this.querySelectorAll('.dropdown-content li a');

      if (this.processId) {
        const protocol = window.location.protocol === 'http:' ? 'ws:' : 'wss:'
        const ws = new WebSocket(`${protocol}//${window.location.host}`);

        // Listen for the "Add Proposal" button click event.
        addButton.addEventListener('click', async() => {
            ws.send(JSON.stringify({
                method: 'addProposal',
                processId: this.processId
            }));
        });

        // Listen for the proposal template click events.
        dropdownItems.forEach(item => {
            item.addEventListener('click', async() => {

                const title = item.querySelector('.title').innerHTML;
                const description = { ops: [{"insert": item.querySelector('.description').innerHTML}]}
              
                ws.send(JSON.stringify({
                    method: 'addProposal',
                    title,
                    description,
                    processId: this.processId
                }));
            });
        });
      }
      else {
        addButton.addEventListener('click', () => addProposal());
    
        dropdownItems.forEach((item, index) => {
          item.addEventListener('click', () => addProposal(index));
        });
      }

      this.checkIsWrapping();
      window.addEventListener('resize', this.checkIsWrapping.bind(this));
    }

    disconnectedCallback() {
      this.destroy();
    }
  }

  customElements.define('add-proposal', AddProposal);
</script>
