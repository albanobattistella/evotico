---
import { t } from 'i18next';
import { process } from 'stores/processStore';
import dropdownOptions from 'composables/proposalTemplates'
const $process = process.get()


---


<add-proposal class="flex items-center flex-wrap">    
  <button id="add-button" class="btn p-2">{ t('process.addProposal') }</button>
  <div class="dropdown">
    <label tabindex="0" class="btn m-1">{ t('addProposalTemplate') }</label>
    <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box">
      {dropdownOptions.map((option, index) => (
        <li key={index}>
          <a class="flex flex-col">
            <b>{option.title}</b>
            <p>{option.description.ops[0].insert}</p>
          </a>
        </li>
      ))}
    </ul>
  </div>
</add-proposal>


<script>
  import { process } from 'stores/processStore';
  import { t } from 'i18next';
  import dropdownOptions from 'composables/proposalTemplates'


  const addProposal = (template = null) => {
    const $process = process.get();

    const proposals = JSON.parse(JSON.stringify($process.proposals));
    proposals.push(
      template !== null
        ? dropdownOptions[template]
        : {
            title: '',
            description: '',
          }
    );
    process.setKey('proposals', proposals);
  };

  class AddProposal extends HTMLElement {
    isWrapping = false;

    checkIsWrapping() {
      this.isWrapping = window.innerWidth <= 767;
      this.updateClassList();
    }

    updateClassList() {
      if (this.isWrapping) {
        this.classList.add('justify-center');
        this.classList.remove('justify-between');
      } else {
        this.classList.add('justify-between');
        this.classList.remove('justify-center');
      }
    }

    init() {
      this.checkIsWrapping();
      window.addEventListener('resize', this.checkIsWrapping(this));
    }

    destroy() {
      window.removeEventListener('resize', this.checkIsWrapping(this));
    }

    constructor() {
      super();
      this.init();
      this.querySelector('#add-button').addEventListener('click', () => addProposal());
      this.addEventListenersToDropdownOptions();

    }

    addEventListenersToDropdownOptions() {
      const dropdownItems = this.querySelectorAll('.dropdown-content li a');
      dropdownItems.forEach((item, index) => {
        item.addEventListener('click', () => addProposal(index));
      });
    }
    disconnectedCallback() {
      this.destroy();
    }
  }

  customElements.define('add-proposal', AddProposal);
</script>
