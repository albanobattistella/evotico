---
import { t } from "i18next";

interface Props {
    dates: number[],
    tillStart?: boolean,
    type?: String
}
const { dates, tillStart, type } = Astro.props;

const timeUnits = [
  { id: 'days', label: t('time.days') },
  { id: 'hours', label: t('time.hours') },
  { id: 'minutes', label: t('time.minutes') },
  { id: 'seconds', label: t('time.seconds') },
];
let classList = ''

switch (type) {
    case 'warning':
        classList = 'link-warning'
        break
    case 'success':
        classList = 'link-success'
        break
}
---
<style>
    .visible {
        display: block;
    }
    .hidden {
        display: none;
    }
</style>
<quick-counter data-dates={dates} data-till={tillStart} class={classList}>
    { timeUnits.map(timeUnit => (
    <span id={timeUnit.id} class="hidden">
        <span></span>
        {timeUnit.label}&nbsp;
    </span>
    ))}
</quick-counter>
<script>

    class QuickCounter extends HTMLElement {
        hide() {
            this.innerHTML = ''
        }
        constructor() {
            super()
            const dates = this.dataset.dates.split(',').map((x) => parseInt(x));
            const tillStart = this.dataset.till === ''
            const el_days = this.querySelector('#days')
            const el_hours = this.querySelector('#hours')
            const el_minutes = this.querySelector('#minutes')
            const el_seconds = this.querySelector('#seconds')
            let updateTime = !tillStart && dates[0] < +new Date()
            const countdown = () => {
                if (tillStart && dates[0] < +new Date() + 1000) { this.hide(); return }
                let time = tillStart ? (+new Date() - dates[0]) / 1000 : updateTime ? (dates[1] - +new Date()) / 1000 : (dates[1] - dates[0]) / 1000
                if (!tillStart && time <= 1) { this.hide(); return }
                time = Math.abs(time)
                let seconds = time % 60
                time = (time - seconds) / 60
                let minutes = time % 60
                time = (time - minutes) / 60
                let hours = time % 24
                time = (time - hours) / 24
                let days = time
                // round numbers

                days = Math.floor(days)
                hours = Math.floor(hours)
                minutes = Math.floor(minutes)
                seconds = Math.floor(seconds)

                el_days.className = days > 0 ? 'visible' : 'hidden'
                el_hours.className = hours > 0 ? 'visible' : 'hidden'
                el_minutes.className = minutes > 0 ? 'visible' : 'hidden'
                el_seconds.className = days <= 0 && hours <= 0 && seconds > 0 ? 'visible' : 'hidden'

                el_days.querySelector('span').innerHTML = String(days)
                el_hours.querySelector('span').innerHTML = String(hours)
                el_minutes.querySelector('span').innerHTML = String(minutes)
                el_seconds.querySelector('span').innerHTML = String(seconds)

                if (updateTime || tillStart) setTimeout(countdown, 1000)
            }
            setTimeout(countdown, 1000)
        
        }
    }
    customElements.define('quick-counter', QuickCounter)


 </script>

