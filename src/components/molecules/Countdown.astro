---
import { t } from "i18next";

interface Props {
    timeleft: String,
    label?: String,
    fromtime?: Number,
}
const { timeleft, label, fromtime } = Astro.props;



---
<quick-counter data-timeleft={timeleft} data-fromtime={fromtime} class="flex flex-col justify-center items-center w-60">
    <h3>{ label }</h3>
    <div class="flex justify-center items-center">
        <div id="days" style="display: none;">
            <span name="val"></span>
            { t('time.days') }&nbsp;
        </div>
        <div id="hours" style="display: none;">
            <span name="val"></span>
            { t('time.hours') }&nbsp;
        </div>
        <span id="minutes" style="display: none;">
            <span name="val"></span>
            { t('time.minutes') }&nbsp;
        </span>
        <span id="seconds" style="display: none;">
            <span name="val"></span>
            { t('time.seconds') }&nbsp;
        </span>
    </div>
</quick-counter>
<script>


    class QuickCounter extends HTMLElement {
        updateTime = false
        timeleft = 0
        fromtime =  null

        constructor() {
            super()
            const el_days = this.querySelector('#days')
            const el_hours = this.querySelector('#hours')
            const el_minutes = this.querySelector('#minutes')
            const el_seconds = this.querySelector('#seconds')

            this.timestamp = +new Date()
            this.fromtime = this.dataset.fromtime;
            this.timeleft = +new Date(this.dataset.timeleft);
            let updateTime = this.fromtime ? false : true
            const countdown = () => {
                let timestamp = this.fromtime ? this.fromtime : +new Date()
                let time = (timestamp - this.timeleft) / 1000
                time = Math.abs(time)
                let seconds = time % 60
                time = (time - seconds) / 60
                let minutes = time % 60
                time = (time - minutes) / 60
                let hours = time % 24
                time = (time - hours) / 24
                let days = time
                // round numbers

                days = Math.floor(days)
                hours = Math.floor(hours)
                minutes = Math.floor(minutes)
                seconds = Math.floor(seconds)

                el_days.style.display = days > 0 ? 'block' : 'none'
                el_hours.style.display = hours > 0 ? 'block' : 'none'
                el_minutes.style.display = minutes > 0 ? 'block' : 'none'
                el_seconds.style.display = days <= 0 && hours <= 0 && seconds > 0 ? 'block' : 'none'

                el_days.querySelector('span').innerHTML = days
                el_hours.querySelector('span').innerHTML = hours
                el_minutes.querySelector('span').innerHTML = minutes
                el_seconds.querySelector('span').innerHTML = seconds
                if (updateTime)
                    setTimeout(countdown, 1000)
            }
            setTimeout(countdown, 1000)
        
        }
    }
    customElements.define('quick-counter', QuickCounter)


 </script>

