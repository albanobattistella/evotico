---
import { t } from "i18next";

interface Props {
    label?: String,
    start: Number,
    end: Number,

}
const { label, start, end } = Astro.props;

const timeUnits = [
  { id: 'days', label: t('time.days') },
  { id: 'hours', label: t('time.hours') },
  { id: 'minutes', label: t('time.minutes') },
  { id: 'seconds', label: t('time.seconds') },
];

---
<style>
    .visible {
        display: block
    }
    .hidden {
        display: none
    }
</style>
<quick-counter data-start={start} data-end={end} class="flex flex-col justify-center items-center w-60">
    <h3>{ label }</h3>
    <div class="flex justify-center items-center">
        { timeUnits.map(timeUnit => (
        <div id={timeUnit.id} class="hidden">
            <span></span>
            {timeUnit.label}&nbsp;
        </div>
        ))}
    </div>
</quick-counter>
<script>
    class QuickCounter extends HTMLElement {

        constructor() {
            super()
            const start = Number(this.dataset.start);
            const end = Number(this.dataset.end);
            const el_days = this.querySelector('#days')
            const el_hours = this.querySelector('#hours')
            const el_minutes = this.querySelector('#minutes')
            const el_seconds = this.querySelector('#seconds')
            let updateTime = +new Date() > start
            const countdown = () => {
                let timestamp = start ? start : +new Date()
                let time = (end - timestamp) / 1000
                time = Math.abs(time)
                let seconds = time % 60
                time = (time - seconds) / 60
                let minutes = time % 60
                time = (time - minutes) / 60
                let hours = time % 24
                time = (time - hours) / 24
                let days = time
                // round numbers

                days = Math.floor(days)
                hours = Math.floor(hours)
                minutes = Math.floor(minutes)
                seconds = Math.floor(seconds)

                console.log(days)
                el_days.className = days > 0 ? 'visible' : 'hidden'
                el_hours.className = hours > 0 ? 'visible' : 'hidden'
                el_minutes.className = minutes > 0 ? 'visible' : 'hidden'
                el_seconds.className = days <= 0 && hours <= 0 && seconds > 0 ? 'visible' : 'hidden'

                el_days.querySelector('span').innerHTML = String(days)
                el_hours.querySelector('span').innerHTML = String(hours)
                el_minutes.querySelector('span').innerHTML = String(minutes)
                el_seconds.querySelector('span').innerHTML = String(seconds)
                if (updateTime)
                    setTimeout(countdown, 1000)
            }
            setTimeout(countdown, 1000)
        
        }
    }
    customElements.define('quick-counter', QuickCounter)


 </script>

