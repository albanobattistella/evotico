---
import { t } from 'astro-i18n';
import { fmtDuration } from '@utils/dateHelpers';

interface Props {
    phase: string
}

const { phase } = Astro.props;
---  
<datetime-slider data-phase={phase}> 
  <span>{ t('duration') }:&nbsp;</span>
  <span id="duration" class="text-success"></span>
  <br/>
  <input type="range" min="1" max="184" class="range" />
</datetime-slider>

<script>
  import logslider from '@utils/logslider';

  
  class DatetimeSlider extends HTMLElement {
    phase = null
    durationElement = null
    inputElement = null;

    changeTime(ev: InputEvent & { target: HTMLInputElement}) {
      const value = Number(ev.target.value)
      //process.setKey(`${this.phase}LogSlider` as keyof Process, value)
      let duration = logslider(value)
      // process.setKey(`${this.phase}Duration` as keyof Process, duration)
      this.updateDisplay();

    }

    updateDisplay() {
      
      //this.inputElement.value = $process[`${this.phase}LogSlider`];
      //this.durationElement.innerHTML = fmtDuration(+new Date() + $process[`${this.phase}Duration`], +new Date());
    }

    connectedCallback() {
      this.updateDisplay();
    }

    constructor() {
      super()
      //this.phase = this.dataset.phase
      //this.inputElement = this.querySelector('input')
      //this.durationElement = this.querySelector('#duration')

      //this.inputElement.addEventListener('input', (ev: InputEvent & { target: HTMLInputElement}) => this.changeTime(ev))
    }
  }
  customElements.define('datetime-slider', DatetimeSlider)

</script>