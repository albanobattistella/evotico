---
import { t } from 'i18next';

import { process } from 'stores/processStore';

import Alert from 'atoms/Alert.astro';
import AlertManager from 'molecules/AlertManager.astro';
import WeightSelector from 'molecules/WeightSelector.astro';
import PhaseSelector from 'molecules/PhaseSelector.astro';
import TimeSelector from 'organisms/TimeSelector.astro';
import QuillEditor from 'molecules/QuillEditor.vue';
import AddProposals from 'molecules/AddProposals.vue';
import EditProposalList from 'organisms/EditProposalList.vue';

const $process = process.get();

---

<AlertManager>
    <Alert type="error" icon="warning">
        { t('alert.error.topicQuestion') }
    </Alert>
    <Alert type="success" icon="checkmark-outline">
        { t('alert.success.createProcess') }
    </Alert>
    <Alert type="error" icon="warning">
        { t('alert.error.proposalsMissing') }
    </Alert>
    <Alert type="error" icon="warning">
        { t('alert.error.payloadSizeTooLarge') }
    </Alert>
</AlertManager>
<create-process>
    <div id="scrollTopicQuestion" />
    <div class="pb-6">
        <div>
            <p>{ t('process.topic') }</p>
            <input name="topicQuestion" class="input input-bordered w-full" value={  $process.title }  oninput="(e: any) => process.setKey('title', e.target.value)" type="text"/>
            <br/>
            <p>{ t('process.description') }</p>
            <QuillEditor client:only="vue"/>

            <WeightSelector/>
        </div>
        <h2>{ t('process.phases.select') }</h2>
        <PhaseSelector/>
    </div>
    <hr/>
    <div class="py-2">
        <div class="flex justify-between items-center flex-wrap">
            { $process.phases === 'full' && <h1>{ t('process.timeLeftHeading') }</h1> }
            { $process.phases === 'voting' && <h1>{ t('process.timeLeftVotingHeading') }</h1> }
        </div>
        <TimeSelector phase="proposal"/>
        <span>
            <p></p>
            <hr/>
        </span>
    
        <TimeSelector phase="voting"/>
    </div>
    <div>
        <hr class="mt-4"/>
        <h2>{ t('process.proposals') }</h2>    

        <EditProposalList client:only="vue"/>
        <AddProposals client:only="vue"/>
    </div>
   
    <br/>
    <br/>
    <div class="text-center">
        <button id="createProcessButton" type="submit" class="btn btn-primary">
            { t('create') }
        </button>
    </div>
</create-process>

<script>
    import i18next, { t } from 'i18next';
    import { process } from 'stores/processStore';
    import { Delta, Quill } from 'quill';
    import IProposal from 'interfaces/IProposal'

    const lang = i18next.language
    class CreateProcess extends HTMLElement {
        scrollTopicQuestion = null
        errorTopicAlert = false
        errorProposalsAlert = false
        errorPayloadSize = false
        successProcessAlert = false
        constructor() {
            super()
            this.querySelector('#createProcessButton').addEventListener('click', () => this.createProcess())
        }
        // Check if all proposals have a title and description
        checkProposalValues(proposals: IProposal[]) {
            return proposals.every((proposal: IProposal) => proposal.title !== '' || proposal.description !== '');
        }

        quillGetHTML(inputDelta: Delta) {
            var tempCont = document.createElement("div");
            (new Quill(tempCont)).setContents(inputDelta);
            return tempCont.getElementsByClassName("ql-editor")[0].innerHTML;
        }
            // Create process
        createProcess = async() => {
            const title = process.get().title.trim();

            if (!title) {
                this.errorTopicAlert = !this.errorTopicAlert;
                this.scrollTopicQuestion.scrollIntoView({ behavior: 'smooth', block: 'start' })

                return;
            }

            let proposals = process.get().phases === 'full' ? [] : JSON.parse( JSON.stringify(process.get().proposals))

            if (process.get().phases === 'voting') {
                for (let i = 0; i < proposals.length; i++) {
                    proposals[i].description = this.quillGetHTML(proposals[i].description)
                }

                if(proposals.length < 2 || !this.checkProposalValues(proposals)) {
                    this.errorProposalsAlert = !this.errorProposalsAlert
                    return
                }
            }

            // Prepare request body
            const body = {
                topicQuestion: process.get().title,
                topicDescription: this.quillGetHTML(process.get().description),
                proposalDates: process.get().phases === 'full' ? process.get().proposalDates : -1,
                votingDates: process.get().votingDates,
                weighting: process.get().weighting,    
                proposals
            }

            if (import.meta.env.DEV) return
            else {
                try {
                    const response = await fetch(`${location.origin}/api/process`, {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(body)
                    });

                    if (response.status === 413) {
                        this.errorPayloadSize = true;
                        console.error('Payload size is too large.');
                        return;
                    }

                    const processId = (await response.json()).id;
                    process.setKey('title', '');
                    process.setKey('description', new Delta());
                    process.setKey('proposals', []);
                            
                    window.location.href = `/${lang !== 'en' ? `${lang}/` : '' }process/${processId}`;
                } catch (error) {
                    console.error(error);
                }
            }
        }    
    }
    customElements.define('create-process', CreateProcess)

</script>