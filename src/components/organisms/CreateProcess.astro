---
import { t } from 'i18next';

import { process } from 'stores/processStore';

import Alert from 'atoms/Alert.astro';
import AlertManager from 'molecules/AlertManager.astro';
import WeightSelector from 'molecules/WeightSelector.astro';
import PhaseSelector from 'molecules/PhaseSelector.astro';
import TimeSelector from 'organisms/TimeSelector.astro';
import AddProposals from 'molecules/AddProposals.astro';
import EditProposalList from 'organisms/EditProposalList.astro';

const $process = process.get();
---


<create-process>
    <div id="scrollTopicQuestion" />
    <div class="pb-6">
        <p>{ t('process.topic') }</p>
        <input id="topicQuestion" name="topicQuestion" class="input input-bordered w-full" value={  $process.title }  type="text"/>
        <br/>
        <p>{ t('process.description') }</p>
        <div id="description"/>
        <br>
        <WeightSelector/>
        <h2>{ t('process.phases.select') }</h2>
        <PhaseSelector/>
    </div>
    <hr/>
    <div class="py-2">
        <div id="timeselectHeading" class="flex justify-between items-center flex-wrap"/>
        <div class="fullOnly">
            <TimeSelector phase="proposal"/>
            <p></p>
            <hr/>
        </div>
        <TimeSelector phase="voting"/>
    </div>
    <div class="voteOnly">
        <hr class="mt-4"/>
        <h2>{ t('process.proposals') }</h2>    
        <EditProposalList />
        <AddProposals />
    </div>
    <br/><br/>
    <div class="text-center">
        <button id="createProcessButton" type="submit" class="btn btn-primary">
            { t('create') }
        </button>
    </div>
    <AlertManager>
        <Alert icon="warning" error>{ t('alert.error.topicQuestion') }</Alert>
        <Alert icon="checkmark-outline" success>{ t('alert.success.createProcess') }</Alert>
        <Alert icon="warning" error>{ t('alert.error.proposalsMissing') }</Alert>
        <Alert icon="warning" error>{ t('alert.error.payloadSizeTooLarge') }</Alert>
    </AlertManager>
</create-process>

<script>
    import i18next, { t } from 'i18next';
    import { process } from 'stores/processStore';
    import IProposal from 'interfaces/IProposal'
    import createQuill from "composables/quillEditor";
    import { addAlert } from 'composables/addAlert'
    import isValidDelta from 'composables/isValidDelta'

    const lang = i18next.language;

    class CreateProcess extends HTMLElement {
        scrollTopicQuestion = this.querySelector('#scrollTopicQuestion')
        quillDescription = null
        alertList = this.querySelector('div.alert-manager').querySelector('div.alert-list')
        alerts = this.querySelector('div.alert-manager').querySelectorAll('alert-element')
        phases = process.get().phases
        
        updatePhasesView() {
            const fullOnlyElements = this.querySelectorAll('.fullOnly');
            const voteOnlyElements = this.querySelectorAll('.voteOnly');
            const isVotingPhase = this.phases === 'voting';

            voteOnlyElements.forEach((element: HTMLElement) => {
                element.style.display = isVotingPhase ? 'block' : 'none';
            });

            fullOnlyElements.forEach((element: HTMLElement) => {
                element.style.display = isVotingPhase ? 'none' : 'block';
            });

            this.querySelector('#timeselectHeading').innerHTML = (isVotingPhase ? `<h1>${t('process.timeLeftVotingHeading')}</h1>` :  `<h1>${t('process.timeLeftHeading')}</h1>`);

        }
        constructor() {
            super()
            process.subscribe(() => {
                const $process = process.get();
                if (JSON.stringify(this.phases) !== JSON.stringify($process.phases)) {
                this.phases = JSON.parse(JSON.stringify($process.phases));
                this.updatePhasesView();
                }
            });

            this.updatePhasesView()

            this.querySelector('#createProcessButton').addEventListener('click', () => this.createProcess())
            this.quillDescription = createQuill('#description');
            this.quillDescription.setContents(isValidDelta(process.get().description) ? process.get().description : { ops: [] })
            this.quillDescription.on('text-change', () => process.setKey('description', this.quillDescription.getContents()))
            let title = this.querySelector('#topicQuestion')
            title.addEventListener('input', (e: any) => process.setKey('title', e.target.value))
            title.innerHTML = process.get().title

        }
        // Check if all proposals have a title and description
        checkProposalValues(proposals: IProposal[]) {
            return proposals.every((proposal: IProposal) => proposal.title !== '' || proposal.description !== '');
        }


        // Create process
        createProcess = async() => {
            const title = process.get().title.trim();
            if (!title) {
                this.scrollTopicQuestion.scrollIntoView({ behavior: 'smooth', block: 'start' })
                addAlert(this.alertList, this.alerts[0].cloneNode(true))
                return;
            }

            let proposals = process.get().phases === 'full' ? [] : JSON.parse( JSON.stringify(process.get().proposals))

            if (process.get().phases === 'voting') {
                for (let i = 0; i < proposals.length; i++) {
                    proposals[i].description = proposals[i].description
                }

                if(proposals.length < 2 || !this.checkProposalValues(proposals)) {
                    addAlert(this.alertList, this.alerts[2].cloneNode(true))
                    return
                }
            }

            // Prepare request body
            const body = {
                topicQuestion: process.get().title,
                topicDescription: this.quillDescription.getContents(),
                proposalDates: process.get().phases === 'full' ? process.get().proposalDates : -1,
                votingDates: process.get().votingDates,
                weighting: process.get().weighting,    
                proposals
            }


            if (import.meta.env.DEV) return
            else {
                try {
                    const response = await fetch(`${location.origin}/api/process`, {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(body)
                    });

                    if (response.status === 413) {
                        addAlert(this.alertList, this.alerts[3].cloneNode(true))
                        return;
                    }

                    const processId = (await response.json()).id;
                    process.setKey('title', '');
                    process.setKey('description', { ops: [] });
                    process.setKey('proposals', []);
                    addAlert(this.alertList, this.alerts[1].cloneNode(true))

                    window.location.href = `/${lang !== 'en' ? `${lang}/` : '' }process/${processId}`;
                } catch (error) {
                    console.error(error);
                }
            }
        }    
    }
    customElements.define('create-process', CreateProcess)

</script>