---
import { t } from 'i18next';

import weightingOptions from "composables/weightingOptions";
import Modal from 'molecules/Modal.astro';
import QRCode from 'atoms/QRCode.astro'
import ContentDoc from "atoms/ContentDoc.astro"
import ProcessTimeLabel from 'organisms/ProcessTimeLabel.astro';
import Icon from 'astro-icon'

const { url } = Astro;

interface Props {
    title?: string,
    description?: string,
    weighting?: string,
    shareable?: boolean,
    proposalDates?: number[],
    votingDates?: number[]
}

const { title, description, weighting, shareable = true, proposalDates, votingDates} = Astro.props;


const weight = weighting ? weightingOptions[Number(weighting) - 1].label : null

---

<process-info class="flex flex-col pb-3" data-title={title} data-description={description}>
    <h1>{ title }</h1>
    <p>{ description }</p>
    <div class="flex justify-end items-center">
        { t('process.weighting') }
        {weight}
        <Modal id="weightingInfo">
            <h3>{ t('process.weighting') }</h3>
            <ContentDoc file_name="NegativeScoreWeighting"/>
        </Modal>
    </div>
    <div>
        { proposalDates && proposalDates[0] > 0 && <ProcessTimeLabel phase="proposal" dates={proposalDates}/> }
        <br/>
        { votingDates && <ProcessTimeLabel phase="voting" dates={votingDates}/> }
        <br/>
    </div>
    { shareable && 
    <div class="w-full pr-2">
        <p>{ t('process.shareableUrl') }</p>
        <div class="flex items-center">

            <input id="shareableUrl" type="text" class="input w-full" readonly value={ url.href }/>
            &nbsp; &nbsp;
            <Modal id="shareableQrCode" icon="qr-code">
                <h3>{ t('process.qrcode') }</h3>
                <div class="flex justify-center">
                    <QRCode text="Astro.url.href" />
                </div>
                <br/>
            </Modal>
            <button class="btn btn-sm btn-ghost btn-circle btn right-2 top-2 share-button"><Icon name="share"/></button>


        </div>
    </div>
    }                          
</process-info>


<script>
    const shareableUrl: HTMLInputElement = document.querySelector('input#shareableUrl')
    if (shareableUrl) {
        shareableUrl.addEventListener('click', () => {
            shareableUrl.focus()
            shareableUrl.select()
            shareableUrl.setSelectionRange(0, 99999);
            navigator.clipboard.writeText(shareableUrl.value);
        })
    }

    class ProcessInfo extends HTMLElement {
        constructor() {
            super()
               this.querySelector('.share-button').addEventListener('click', function() {
                if(navigator.share) {
                    navigator.share({
                        title: this.dataset.title,
                        text: this.dataset.description,
                        url: window.location.href
                    })
                }
            });
        }
        
    }
    customElements.define('process-info', ProcessInfo)

 
</script>